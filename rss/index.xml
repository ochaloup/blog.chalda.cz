<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chalda's blog]]></title><description><![CDATA[Notes for not being forgotten]]></description><link>http://blog.chalda.cz</link><image><url>/images/cover.jpg</url><title>Chalda&apos;s blog</title><link>http://blog.chalda.cz</link></image><generator>RSS for Node</generator><lastBuildDate>Tue, 03 Oct 2017 05:01:54 GMT</lastBuildDate><atom:link href="http://blog.chalda.cz/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Listing WFLY domain with Groovy]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/wildfly_groovy.png" alt="wildfly groovy.png">
</div>
</div>
<div class="paragraph">
<p>For more extensive information about WildFly groovy scripting see</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://developer.jboss.org/wiki/AdvancedCLIScriptingWithGroovyRhinoJythonEtc" class="bare">https://developer.jboss.org/wiki/AdvancedCLIScriptingWithGroovyRhinoJythonEtc</a></p>
</li>
<li>
<p><a href="http://www.mastertheboss.com/jboss-server/jboss-script/managing-wildfly-with-groovy-shell" class="bare">http://www.mastertheboss.com/jboss-server/jboss-script/managing-wildfly-with-groovy-shell</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connecting_with_wfly_cli">Connecting with WFLY cli</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Starting <code>groovysh</code> with <code>jboss cli jar</code> on classpath could be done in the following way</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">export JBOSS_HOME=$PWD
groovysh -cp $JBOSS_HOME/bin/client/jboss-cli-client.jar</code></pre>
</div>
</div>
<div class="paragraph">
<p>To connect with CLI you need</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>import <code>scriptsupport</code> package</p>
</li>
<li>
<p>disable security manager as there is some flaw in handling security policy through client jar up to WildFly. You can define a security manager policy file where permission for everythin is set.
Anoth option is to use call <code>System.setSecurityManager(null)</code> which seems to me being easier.</p>
</li>
<li>
<p>instantiate cli and connect to a running WildFly instance</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">import org.jboss.as.cli.scriptsupport.*
System.setSecurityManager(null)
cli = CLI.newInstance()
cli.connect("remote", "localhost", 9999, null, null)</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utility_methods">Utility methods</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">def getResponseAsStringList(def result) {
  list = []
  result.getResponse().get("result").asList().each {list &lt;&lt; it.asString()}
  return list
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_script">The script</h2>
<div class="sectionbody">
<div class="paragraph">
<p>And here is a script which loads data about servers in domain. If you print the content of the variables <code>hostServer</code>, <code>profileServer</code> or <code>groupProfile</code> you will get listing you could be interested in.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">groupProfile = [:]
groups = getResponseAsStringList(cli.cmd(':read-children-names(child-type=server-group)'))
profiles = getResponseAsStringList(cli.cmd(':read-children-names(child-type=profile)'))

groups.each { group -&gt;
  profile = cli.cmd("/server-group=$group:read-attribute(name=profile, include-defaults=true)").getResponse().get("result").asString()
  groupProfile[group] = profile
}

hostServer = [:]
profileServer = [:]
profiles.each {profile -&gt; profileServer[profile] = []}
hosts = getResponseAsStringList(cli.cmd(':read-children-names(child-type=host)'))

hosts.each { host -&gt;
 resultServers = cli.cmd("/host=$host:read-children-names(child-type=server)")
 servers = getResponseAsStringList(resultServers)
 serverProfile = [:]
 servers.each { server -&gt;
   status = cli.cmd("/host=$host/server-config=$server:read-attribute(name=status, include-defaults=true)").getResponse().get("result").asString()
   group = cli.cmd("/host=$host/server-config=$server:read-attribute(name=group, include-defaults=true)").getResponse().get("result").asString()
   // when disabled profile is not filled
   // profile = cli.cmd("/host=$host/server=$server:read-attribute(name=profile-name, include-defaults=true)").getResponse().get("result").asString()
   profile = groupProfile[group]
   serverProfile[server] = [status, group, profile]
   // if (profileServer[profile] == null)  profileServer[profile] = []
   profileServer[profile] &lt;&lt; "${host}:${server}"
 }
 hostServer[host] = serverProfile
}</code></pre>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/09/30/Listing-WFLY-domain-with-Groovy.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/09/30/Listing-WFLY-domain-with-Groovy.html</guid><category><![CDATA[groovy]]></category><category><![CDATA[wildfly]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 30 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Augeas and XML]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/twelve_labours.jpg" alt="twelve labours.jpg">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_what">Augeas&#8230;&#8203; what?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The name Augeas is based on greek legend about Herakles who has to clean stables
of the king Augeas from dung as one of his twelve laubours that he has to fulfill as a punishment
for killing his wife and children (for a justification he was driven mad by Hera).</p>
</div>
<div class="paragraph">
<p><a href="http://augeas.net">Augueas referenced here is a tool</a> for doing changes in textual configuration files.
It&#8217;s purpose came from fact that whole Linux configuration is based on text files.
If you want to do some changes automatically by a script you are usually doomed
to use <code>sed</code> or <code>awk</code>. Augeas is expected to do the task easier.
I was looking for a tool for doing changes of WildFly <code>standalone.xml</code> and I don&#8217;t like
XSLT thus I was searching for some alternatives.
This idea to use Augeas came to my mind from nice video presentation of usage JBoss with Docker.
It was one part from series of Virtual JBoss User Group
presentations (<a href="https://www.youtube.com/watch?v=4uQ6gR_xZhE">Docker and JBoss - the perfect combination</a>).
The presentation was lead by <a href="https://goldmann.pl/blog">Marek Goldmann</a> who does have really nice post
about topic of automatic changes of JBoss configuration file at his blog
- <a href="https://goldmann.pl/blog/2014/07/23/customizing-the-configuration-of-the-wildfly-docker-image" class="bare">https://goldmann.pl/blog/2014/07/23/customizing-the-configuration-of-the-wildfly-docker-image</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_the_augeas_works">How the Augeas works</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Augeas provides machinery but there has to be a 'recipy' which defines semantics of particular
configuration files. This recipy is called <code>lens</code> in terms of Augeas tooling.
<code>Lens</code> describes format of your configuration. By default Augeas provides <code>lenses</code> for standard files
residing under <code>/etc</code> directory. If you want to work with some other file you need to find a lens for your one
(see <a href="http://augeas.net/stock_lenses.html">Augeas built-in lenses</a>) or, when not provided,
you have two options -use some generic <code>lens</code> and be more verbose when changing configuration,
or write your own <code>lens</code>.</p>
</div>
<div class="paragraph">
<p>As I want to change XML file I needed to use <code>xml lens</code> for Augeas to know how to parse the file.
This provided lens is a simple in way that it doesn&#8217;t take care about any schema or namespace.
It just take the XML file as a text and separates tag (elements) from text and attributes.
The data is structured in a tree consisting nodes. Each node contains two strings <code>label</code> (a node name) and <code>value</code>.
You can point to each node with path expression similar to <code>XPath</code>
(see <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions" class="bare">https://github.com/hercules-team/augeas/wiki/Path-expressions</a> [Path Expressions in Augeas]).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_usage">Augeas usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For the work you will use command <strong>augtool</strong>.</p>
</div>
<div class="paragraph">
<p>Augeas is part of the most Linux distributions. If it&#8217;s not your case,
you can install it from the package - in Fedora it&#8217;s package named augeas (<code>dnf install augeas</code>) - or
you can simply <a href="http://augeas.net/download.html">download it</a> and put the <code>augtool</code> command on the <code>PATH</code>.</p>
</div>
<div class="paragraph">
<p>When you run <strong>augtool</strong> and you get an interactive shell where
you can start typing Augeas commands. When it&#8217;s run with some undefined parameter (e.g. <code>-h</code> is one of them <span class="icon"><i class="fa fa-smile-o"></i></span>)
then you will get list of possible options to use.</p>
</div>
<div class="paragraph">
<p>When I came to augeas tool first I was searching for a way to pass a set of rules (augeas commands)
and define a file that the rules will be applied to. But Augeas does not work in this way. You need to understand
the structure of Augeas tree and how it works with its nodes.
The Augeas wiki page <a href="https://github.com/hercules-team/augeas/wiki#Using_Augeas" class="bare">https://github.com/hercules-team/augeas/wiki#Using_Augeas</a> is quite informative in this matter.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s examine a bit the <code>augtool</code> here</p>
</div>
<div class="paragraph">
<p>If you run the <code>augtool</code> there are tree base commands which are your friends <span class="icon"><i class="fa fa-smile-o"></i></span> - <strong>print</strong>, <strong>ls</strong> and <strong>match</strong>.
These commands are used to get information about the structure of the Augeas tree.
<strong>Print</strong> and <strong>match</strong> do mostly the same. The <strong>print</strong> scrawl, starting at the defined path,
down by the tree and print all nodes (labels and values). <strong>Match</strong> do similar but you influencing
what is printed by using subsitute characters as <code>*</code> <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions">similar to XPath queries</a>.
Command *ls* just shows node names (labels) residing under the defined path.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_commands">Augeas commands</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Good start is to run command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool
ls /</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can see that there are two base nodes - <strong>augeas</strong> and <strong>files</strong>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Node <strong>augeas</strong> is where configuration is saved.</p>
</li>
<li>
<p>Node <strong>files</strong> is where all parsed data is saved.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to make some change you use command <strong>set</strong>. For example you can try to list the <code>/etc/fstab</code>
file by</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool
match /files/etc/fstab/*[label() = '#comment']
set /files/etc/fstab/#comment[1] "my strange comment"
save</code></pre>
</div>
</div>
<div class="paragraph">
<p>On this example we can see that Augeas works with a copy of the content and changes
are write back to the filesystem when <code>save</code> command is called.</p>
</div>
<div class="paragraph">
<p>That was about config files and lenses loaded by Augeas automatically.
That is, there are defined lenses and files to be <code>autoloaded</code>.</p>
</div>
<div class="paragraph">
<p>You can can observe the structure of the Augeas tree - lenses and files by running</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">print /augeas
print /files</code></pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Files don&#8217;t poses the same placement in the Augeas tree as they have
int the file system.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>if you want to see all the autoloaded files try</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">match /augeas/load/*/incl</code></pre>
</div>
</div>
<div class="paragraph">
<p>if you want to see all the autoloaded lenses try</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">ls /augeas/load</code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Because of all the autoloading the start of augtool could be a bit slower and if we know that
we want to work just with one specific file we can use <strong>--noload</strong> and <strong>--noautoload</strong> parameters.
In short run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -LA</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Try to run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -LA
print /</code></pre>
</div>
</div>
<div class="paragraph">
<p>and you will see nothing.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Helpful parameters</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>-b</em>  (<em>--backup</em>) which says that original file will be backuped, before changes are saved,
this parameter creates file with the same name but suffixed with <code>.augsave</code></p>
</li>
<li>
<p><em>-e</em>  (<em>--echo</em>) which says that commands which are executed will be printed on stdout</p>
</li>
<li>
<p><em>-r</em>  (<em>--root</em>) definition of a specific directory as root of the Augeas file system,
for example <code>-r .</code> says that the root will not be <code>/</code> but the current directory (still referenced under <code>/files/</code>)</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>With usage of <code>-LA</code> nothing is preloaded and we have to define ourselves what to work with.
Let&#8217;s define a file to work with and lens for parsing it. When we change such <em>settings</em>
the <code>load</code> command has to be used to get activated (or reload the agutool iself).
We have to define type of file to work with by adding element under augeas load node. That could be arbitrary name but let&#8217;s say <em>xml</em> as we will work with xml.
As adding the xml node we define what is lens which defines rules for parsing.
This will be predefined name of the lens <strong>Xml.lns</strong> (see <a href="https://github.com/hercules-team/augeas/wiki/Loading-specific-files" class="bare">https://github.com/hercules-team/augeas/wiki/Loading-specific-files</a>)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/lens Xml.lns</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now for definition what file to work with use absolute path to a file and put it under <em>xml</em> element under node incl.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl /opt/jboss/standalone/configuration/standalone.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>If there should be more files to load you can use the path expression</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl /opt/jboss/standalone/configuration/*.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or if you want to specify more files by your hand, you will need to use some of the technics
mentioned under <a href="https://github.com/hercules-team/augeas/wiki/Adding-nodes-to-the-tree" class="bare">https://github.com/hercules-team/augeas/wiki/Adding-nodes-to-the-tree</a>. AS an example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl[1] /opt/jboss/standalone/configuration/standalone.xml
set /augeas/load/xml/incl[2] /opt/jboss/standalone/configuration/standalone-full.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally we need to load the data inside to augeas</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">load</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you don&#8217;t use option <code>-LA</code> then xml lens is loaded under /augeas/load/Xml. You can then add there some file as</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/Xml/incl[1] /opt/jboss/standalone/configuration/standalone.xml
load</code></pre>
</div>
</div>
<div class="paragraph">
<p>This has an 'advantage' that you are free from specifying lens definition at the start.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Now came the work with Augeas tree itself. As it was said the loaded files are under root node /files.
Let&#8217;s define a variable to reuse it afterwards. We are going to work with the <code>standalone.xml</code> loaded here.
And the variable is <em>logging</em> and will contain the Augeas tree of the logging subsystem</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defvar logging /files/home/ochaloup/tmp/augeas/standalone.xml/server/profile/subsystem[#attribute/xmlns=~regexp('.*logging.*')]</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;redefining logging level</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set $logging/console-handler/level/#attribute/name "DEBUG"
set $logging/root-logger/level/#attribute/name "DEBUG"</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;at the end save changes into the original file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">save</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;as final step it&#8217;s good to check whether we are error free</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">print /augeas//error</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you want to work with some specific node and you don&#8217;t know whether it&#8217;s already existing
use command <em>defnode</em>. I wanted to define trace logging level for jca subsystem so I did following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defnode logger_jca $logging/logger[#attribute/category='org.jboss.jca']
set $logger_jca/#attribute/category "org.jboss.jca"
defnode logger_jca_level $logger_jca/level
set $logger_jca_level/#attribute/name "TRACE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Few final notes on working with xml converted to Augeas tree</p>
</div>
<div class="ulist">
<ul>
<li>
<p>tags (xml elements) are converted to augeas nodes</p>
</li>
<li>
<p>the attributes and text could be found under <code>#attribute</code> and <code>#text</code> node under the particular tag name</p>
</li>
<li>
<p>when traversing the tree you can use <code>*</code> as a definition of any value or you can use <code>//</code>
to expect whatever number of nodes between current and the defined one.
Try <code>//*[#attribute/xmlns=~regexp('.<strong>logging.</strong>')]</code>.</p>
</li>
<li>
<p>check section <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions#user-content-Tips_amp_Tricks">Tips and Trics in Augeas manual page</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running_augtool_non_interactive_way">Running augtool non-interactive way</h2>
<div class="sectionbody">
<div class="paragraph">
<p>How to use <code>augtool</code> to define lenses and work files in an one step?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -r . --noautoload --transform 'Xml.lns incl /standalone.xml'</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command says that you define root of the augtool to current directory.
There is automatically loaded no default lenses.
There is no default rules for loading any file.
Then you are defining to load <code>standalone.xml</code> (expected from the current directory)
and this file will be transformed by lens <code>Xml.lns</code>.
Now you are ready to run any of the commands mentioned above.</p>
</div>
<div class="paragraph">
<p>If you have commands to be executed by the Augeas tooling you can let the Augeas
to read it from a file (<code>-f</code> parameter) or pass it on the standard input.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_my_augeas_script_to_change_wildfly_logging">My Augeas script to change WildFly logging</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#!/bin/bash

# ------------------------------------------------------
# This scripts aim to run Augeas tool (command augtool)
# to change content of specific xml file
# ------------------------------------------------------

# -------------------------------------------
# ---------------- FUNCTIONS ----------------
# -------------------------------------------
function usage() {
cat &lt;&lt; EOF
Usage:
`basename $0` path_to_augeas_rules path_to_xml [file_with_bash_variables] [OPTIONS]
  path_to_augeas_rules       path to files with augeas rules but without loading file and setting xml lenses
                             the loading and saving are done at the end of this script
                             please, be sure to escape Augeas variables otherwise it will be expanded as bash variables
  path_to_xml                file that will be changed by the augeas processing(rules)
  file_with_bash_variables   file with variables that will be expanded to path_to_augeas_rules
 Options:
  -h Show help options.
  -Dvariable_name=value  Define variable that is used for replacement of data in xml file.
                         This variable will override a value from bash variable file if defined.
 WARNING: if you run this script against some Augeas script then be sure to escape augeas variables (defvar) by backslash
          not slashed variables will be handled as bash variables and will be expanded
EOF
}

# Parsing variables defined as script options
function parseVariables() {
  PARSED_VARIABLES=0
  while [ $# -gt 0 ] &amp;&amp; [[ "$1" =~ ^-D([^=]+)=(.*) ]]; do
    [ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "parsing $1"
    VAR_NAME=`echo ${BASH_REMATCH[1]} | sed 's/\./_/g'`
    VAR_VALUE="${BASH_REMATCH[2]}"
    eval "${VAR_NAME}=${VAR_VALUE}"
    shift
    PARSED_VARIABLES=$(($PARSED_VARIABLES+1))
  done
}

# Loading file with augeas rules and running evaluation over the file
# to inject values of bash variables defined by script or script parameters
function evalAugeas() {
  [ "x$1" = "x" ] &amp;&amp; echo "No argument of filename specified" &amp;&amp; return
  local LINE
  # flag -r tells read not to treat backslashes as escape char
  while read -r LINE; do
    local EVALUATED_LINE=`eval "echo \"${LINE}\""`
    # comment line (btw. quoting regexp:  http://stackoverflow.com/questions/218156/bash-regex-with-quotes)
    [[ "$EVALUATED_LINE" =~ `echo "^[ ]*[#]"` ]] &amp;&amp; continue
    # including different file
    if [[ "$EVALUATED_LINE" =~ `echo "^[ ]*\binclude\b[ ]+(.*)"` ]]; then
      local MATCH="${BASH_REMATCH[1]}"
      # possibly looking relatively from directory where this script is placed in
      [ ! -f "$MATCH" ] &amp;&amp; MATCH="$(dirname $([ -L $0 ] &amp;&amp; readlink -f $0 || echo $0))/${MATCH}"
      [ -f "$MATCH" ] &amp;&amp; evalAugeas "$MATCH" || &gt;&amp;2 echo "Can't include '$MATCH' as not a file in ruleset '$1'"
      continue
    fi
    # printf is needed to get new lines added on \n
    printf -v TEMPLATE "${TEMPLATE}${EVALUATED_LINE}\n"
  done &lt; "$1"
}


# -----------------------------------------------
# ---------------- SCRIPT ITSELF ----------------
# -----------------------------------------------
[ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "Calling: $0 $@"
# Taking off variables defined right after the script name
# variable means '-Dname=value'
parseVariables "$@"
shift $PARSED_VARIABLES

# Printing help
[[ "$*" =~ -[-]{0,1}(h|help)( |$) ]] &amp;&amp; usage &amp;&amp; exit
[ $# -eq 0 ] &amp;&amp; usage &amp;&amp; echo " -&gt; No arguments defined" &amp;&amp; exit
[[ "$1" =~ ^- ]] || [ "$2" = "" ] || [[ "$2" =~ ^- ]] &amp;&amp; usage \
   &amp;&amp; echo " -&gt; First two arguments are obligatory to be paths to files" &amp;&amp; exit
! [ -f "$1" ] &amp;&amp; usage &amp;&amp; echo " -&gt; Can't find file '$1' that should contain augeas rules" &amp;&amp; exit


AUGEASFILE="$1"
shift
# If we are able to touch the file in second argumetn (which is xml to transform)
# changing it to an absolute path. If not leaving it as it is as. Asterisk notation
# could be used (e.g. /abs/path/configuration/standalone*.xml)
[ -f "$1" ] &amp;&amp; XMLFILE=`readlink -f "$1"` || XMLFILE="$1"
[[ ! "$XMLFILE" =~ ^/ ]] &amp;&amp; echo "Please define the XML file(s) descriptor '$1' as absolute path" &amp;&amp; exit
shift
VARIABLESFILE=
[ -f "$1" ] &amp;&amp; VARIABLESFILE="$1" &amp;&amp; shift

# Injecting the variables from file in the third argument
# If variables contains '.' then it's changed for underscore '_'
if [ -f "$VARIABLESFILE" ]; then
  VARS=`cat "$VARIABLESFILE" | sed 's/\./_/g'`
  eval "$VARS"
fi

# Parsing variables defined as script options
# variable means '-Dname=value'
parseVariables "$@"
shift $PARSED_VARIABLES

# Injecting data from augeas rule file to TEMPLATE var
# simple way: TEMPLATE=`eval "echo \"$(cat \"$AUGEASFILE\")\""`
TEMPLATE=
evalAugeas "$AUGEASFILE"
[ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "$TEMPLATE"


# -- And now let's rock'n'roll with Augeas itself --
augtool -Aeb -t "Xml.lns incl $XMLFILE" &lt;&lt;EOF
defvar file "/files${XMLFILE}"
$TEMPLATE
save
print /augeas//error
EOF


# Cleaning the output XML file by tidyp if available
tidyp -v &gt; /dev/null 2&gt;&amp;1
if [ $? -eq 0 ]; then
  for I in $XMLFILE; do
    tidyp -xml -i -q &lt; "$I" &gt; "$I".tmp
    mv "$I".tmp "$I"
  done
fi</code></pre>
</div>
</div>
<div class="paragraph">
<p>I name the script as <code>augeas</code> and run it with parameter of what is the logging category to change
and adding the Augeas commands to be executed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augeas -Dcategory=com.arjuna ~/scripts/augeasconf/logging.aug</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>logging.aug</code> looks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defvar logging \$file/server/profile/subsystem[#attribute/xmlns=~regexp('.*logging.*')]
defnode logger \$logging/logger[#attribute/category='${category:-com.arjuna}']
set \$logger/#attribute/category "$category"
defnode logger_level \$logger/level
set \$logger_level/#attribute/name "${level:-TRACE}"</code></pre>
</div>
</div>
<div class="paragraph">
<p>There is a little bit magic of escaping with <code>\</code> as bash and <code>augtool</code> uses character <code>$</code> for similar
approach (variable definition) and I need to replace some of the values by bash variables and some
of the variables to be processed by Augeas itself.</p>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</guid><category><![CDATA[augeas]]></category><category><![CDATA[xml]]></category><category><![CDATA[configuration]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 30 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Asciidoctor]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/asciidoctor.png" alt="asciidoctor.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_asciidoctor_and_asciidoc_and_the_others">Asciidoctor and AsciiDoc and the others</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>Asciidoctor</code> is a text processor and toolchain as stated <a href="https://github.com/asciidoctor/asciidoctor">in their github pages</a>.
Under the term of text processor we can imagine a processor which gets on input a text <em>annotated</em> by in
syntax and on output you get some <em>readable</em> format like pdf. The <code>Asciidoctor</code> works with
<a href="http://www.methods.co.nz/asciidoc">AsciiDoc</a> markup language.</p>
</div>
<div class="paragraph">
<p>There are multiple other markup languages which serves for writing text and providing their toolchain
to provide text in well consumable/readable form.
The text processor based on XML is <a href="http://docbook.org">DocBook</a>,
the well known for type setting is [<a href="http://www.latex-project.org">LaTeX</a>.
The html itself is a markup language where you put tags around your text and browser works
as the processor to show the text formatted.</p>
</div>
<div class="paragraph">
<p>The advantage is that you can write the text annotate it with a formatting syntax
and then with usage of the tools gets various output format - kind of html, pdf etc.</p>
</div>
<div class="paragraph">
<p>All the named markup languages have trouble that&#8217;s the syntax delay you when you&#8217;re writing
and is harder to read the raw text with formatting markup.</p>
</div>
<div class="paragraph">
<p>That&#8217;s where <a href="http://www.methods.co.nz/asciidoc">AsciiDoc</a> or maybe better known
<a href="http://daringfireball.net/projects/markdown">MarkDown</a> languages
and the <a href="https://en.wikipedia.org/wiki/Wiki_markup">Wiki Markup</a> could be counted too.
They are markup languages which aims to be easy to read and easy to write when
working with raw text and still easily covertable to formats like html or pdf.</p>
</div>
<div class="paragraph">
<p>I fell in low with <code>AsciiDoctor</code>. I&#8217;m not sure why exactly in this one but
but it seemed to me being a little more intuitive than <code>MarkDown</code>.
I use on day to day basis, whenever I need to write some notes (especially more structured)
or any kind of longer text.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_asciidoctor_in_more_details">AsciiDoctor in more details</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I know that the first idea to look at it came from JBoss Community podcast
<a href="http://jbosscommunityasylum.libsyn.com/podcast-32-is-there-an-asciidoctor-on-board">JBoss Community Aylum on Asciidoctor</a>
which provides quite a good portion information what is it about and what is it good for.</p>
</div>
<div class="paragraph">
<p><code>Asciidoctor</code> is based on syntax of old Python <code>AsciDoc</code> markup language but it rewrites the processor to Ruby
and adds a many enhancements on top of it.
It&#8217;s focused on writing documentation or technical type of text.</p>
</div>
<div class="paragraph">
<p>I learn to use <a href="https://atom.io">Atom</a> editor to write the text. There I use <a href="https://atom.io/packages/language-asciidoc">plugin to for syntax highligting</a>
(probably installed by default) and then <a href="https://atom.io/packages/asciidoc-preview">plugin to preview the text written in AsciiDoctor markup</a>.
The shortcut <code>CTRL+SHIFT+A</code> started to be my beloved friend.</p>
</div>
<div class="paragraph">
<p>From writing text it was short way to use it for writing blog posts (see this blog and <a href="http://hubpress.io">Hubpress.io platform</a>)
and using it for <a href="http://asciidoctor.org/docs/install-and-use-revealjs-backend">preparing presentation</a>. It&#8217;s really my favorite
way as I can restructuralize the text with ease that is not possible in GUI editors.
I could use the pure Reveal.js[<a href="http://lab.hakim.se/reveal-js" class="bare">http://lab.hakim.se/reveal-js</a>] but usage of <code>AsciiDoc</code> makes writing
even easier.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_syntax_reference">Syntax reference</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>For getting known to its syntax look at <a href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference">Asciidoc Quick Referece</a>.</p>
</li>
<li>
<p>The cheatsheet I use is <a href="https://powerman.name/doc/asciidoc">AsciiDoc cheatsheet at PowerMan</a></p>
</li>
<li>
<p>The perfect guide to <code>AsciiDoctor</code> hacks is <a href="https://leanpub.com/awesomeasciidoctornotebook">Awesome Asciidoctor Notebook</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_some_howtos">Some HOWTOs</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nevertheless all the time when I start to learn something I normally don&#8217;t like some small part of default behavior.
Here it was the fact that first paragraph after the title is presented as lead paragraph and it&#8217;s highlighted.
I started to search and I get to understanding that each paragraph (block as formatable building block) gets <code>a role</code> by default.
In this case it should be role <code>lead</code> which could be defined by hand in text by putting the role name into square brackets preceded by dot - like <code>[.lead]</code>.</p>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/17/Asciidoctor.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/17/Asciidoctor.html</guid><category><![CDATA[asciidoctor]]></category><category><![CDATA[writing]]></category><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Wed, 17 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[HubPress.io - how to installl]]></title><description><![CDATA[<h1 id="_installation_of_hubpress_io" class="sect0">Installation of HubPress.io</h1>
<div class="paragraph">
<p>Writing blogposts is a proof-of-concept for me having them as a knowledgebase.
For a some time when writing any note I use <a href="http://asciidoctor.org">AsciiDoc(tor)</a> format.
Thus I started to search for option that allows me to write blog-notes that way too.</p>
</div>
<div class="paragraph">
<p>I could see that many people host blogs at <a href="http://github.io" class="bare">http://github.io</a> I decided to try that way too.
I started by looking for a tool to generate static webpages with <a href="http://asciidoctor.org/docs/asciidoc-asciidoctor-diffs">AsciiDoc</a> support.
There is the mostly used <code>Jekyll</code> - written in ruby, generating a webpage from template
on your local machine. There is <a href="https://github.com/asciidoctor/jekyll-asciidoc">plugin for AsciiDoc</a>.
Other tool that I was evaluating was <a href="http://awestruct.org">:awestruct</a>.</p>
</div>
<div class="paragraph">
<p>Then I found <a href="http://hubpress.io">HubPress.io</a> that has a concept of a webapp whole written in javascript
which generates static website directly in your browser sending it then to GitHub repo. Merit of this approach
is a nice admin console in your browser. Flaw is a little bit longer waiting time to get post being published.
The other could be current
<a href="http://blog.hubpress.io/2016/10/11/We-Arent-Dead-Yet-Hub-Press-Roadmap.html">stall in the development process</a>. But it seems not be fully true as there is new versions coming (see
<a href="https://github.com/HubPress/hubpress.io/commit/ceaca97655fd3a49e4bc057201f0eb7109ad2d4a">0.8.0</a>).</p>
</div>
<div class="paragraph">
<p>So far so good. I decided to give it a try.</p>
</div>
<div class="paragraph">
<p>Process of installation is quite simple - you <a href="https://github.com/HubPress/hubpress.io">fork repo</a>,
<a href="https://github.com/HubPress/hubpress.io/blob/master/hubpress/config.json">change config file</a>
and you can start to write a blog posts inside of the administration console.</p>
</div>
<div class="paragraph">
<p>Nevertheless check <a href="https://hubpress.gitbooks.io/hubpress-knowledgebase">knowledgebase to HubPress</a>
and <a href="https://github.com/HubPress/dev.hubpress.io/blob/gh-pages/README.adoc">documentation on GitHub</a>.</p>
</div>
<div class="paragraph">
<p>&#8230;&#8203;or if you plan to run <code>HubPress.io</code> blog against your custom domain these steps could be helpful for you</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fork repo</p>
<div class="ulist">
<ul>
<li>
<p>Fork <a href="https://github.com/HubPress/hubpress.io">github repository</a> and set <code>gh-pages</code>
<a href="https://github.com/HubPress/dev.hubpress.io/blob/gh-pages/README.adoc#use-a-custom-domain-or-github-page-domain-already-in-use">as default one</a>.</p>
</li>
<li>
<p>set the <code>custom domain</code> field to name of your domain</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Having set the <code>custom domain</code> will cause creation of <code>CNAME</code> file under root
of your github repository.</p>
</div>
<div class="paragraph">
<p>The content of the file is just the name of your custom domain - thus what you
put to the field.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/hubpressio/githubpages.jpg" alt="githubpages.jpg">
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>change <code>hubpress/config.json</code> file to contain (meta)data</p>
<div class="ulist">
<ul>
<li>
<p>username</p>
</li>
<li>
<p>repositoryName</p>
</li>
<li>
<p>branch</p>
</li>
<li>
<p>cname
in my case it was like this</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "meta": {
    "username": "ochaloup",
    "repositoryName": "blog.chalda.cz",
    "branch": "gh-pages",
    "cname": "blog.chalda.cz",
}, ...</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>config.json</code> file serves to HubPress.io as a configuration file so all settings
that you will set in administration interface will be saved here</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When all is set fine you can now go to <code>HubPress.io</code> admin page which is
hidden under subaddress <code>hubpress</code>. In my case it&#8217;s at path <a href="http://blog.chalda.cz/hubpress" class="bare">http://blog.chalda.cz/hubpress</a>.
You need to log in with credentials which you use to login to GitHub. HubPress.io calls
directly the GitHub identification service to confirm that you are the owner of the repo.</p>
</li>
<li>
<p>Afte the first login you can see empty screen. That&#8217;s ok and just create a new article.<br>
[Updated] for version <code>0.8.0</code> it seems that there is already shown information that you have 0 posts so it&#8217;s not misleading already.</p>
</li>
<li>
<p>For <a href="https://disqus.com">Disqus</a> you need short name for your site to be set in HubPress.io.
You will find it when already having page under Discusq when you go <code>Admin</code> &#8594; <code>Settings</code>
&#8594; choose page &#8594; <code>General</code> &#8594; <code>Shortname</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>That&#8217;s more or less it. Now it&#8217;s time to write and experiment.</p>
</div>]]></description><link>http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</guid><category><![CDATA[hubpress.io]]></category><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 06 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[DNS setting for GitHub pages]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_github_pages">Github pages</a>
<ul class="sectlevel2">
<li><a href="#_war_of_terminology">War of terminology</a></li>
<li><a href="#_repository_settings">Repository settings</a></li>
</ul>
</li>
<li><a href="#_dns_settings">DNS settings</a>
<ul class="sectlevel2">
<li><a href="#_tools_to_help">Tools to help</a></li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_github_pages">Github pages</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When setting a blog on GitHub pages I found a bit hard for me to understand
what should be set for DNS to run it on my custom domain.</p>
</div>
<div class="paragraph">
<p>There is quite good introductory for the process in
<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/">documentation</a>
but still I was quite confused at the start. Unknown terms and fact that
I&#8217;m not familiar with DNS. I mean I haven&#8217;t seen it from my college times.</p>
</div>
<div class="paragraph">
<p>I wanted the following setup</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a> being pointed from domain <a href="http://chalda.cz" class="bare">http://chalda.cz</a></p>
</li>
<li>
<p><a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a> being pointed from doman <a href="http://blog.chalda.cz" class="bare">http://blog.chalda.cz</a></p>
</li>
<li>
<p><code>www</code> variants points to variant without www (<a href="http://www.chalda.cz" class="bare">http://www.chalda.cz</a> to <a href="http://chalda.cz" class="bare">http://chalda.cz</a>)</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_war_of_terminology">War of terminology</h3>
<div class="ulist">
<ul>
<li>
<p><strong>user pages</strong>  - regards of <a href="https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/">DNS settings</a>
it&#8217;s the same thing as organization pages just for a user. A user (me) have only one user
personal pages. You can create one when creating GitHub repository <code>&lt;username&gt;.github.io</code>.
In my case it&#8217;s <a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a>. Then any static web page content
is available at <code><a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a></code>.</p>
</li>
<li>
<p><strong>project pages</strong> - <em>project</em> is my blog at <a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a>.
By default is available at <code><a href="http://ochaloup.github.io/blog.chalda.cz" class="bare">http://ochaloup.github.io/blog.chalda.cz</a></code>.</p>
</li>
<li>
<p><strong>apex domain</strong> - is equal to a term <code>root domain</code> - meaning domain without <code>www</code> or <code>blog</code>.
In my case the wording <code>apex domain</code> means <code>chalda.cz</code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_repository_settings">Repository settings</h3>
<div class="paragraph">
<p>For a GitHub repository being availble on GitHub Pages (meaning under <code>.github.io</code>)
you need to set it up. Go by tab <code>Settings</code> at your repository and scroll down to section <em>GitHub Pages</em>.
There you change <em>None</em> to a branch that should represent the content of the <em>GitHub Pages</em>.</p>
</div>
<div class="paragraph">
<p>When you want to use custom domain you need to define what will be at box <em>Custom domain</em>.
In my case I want to have the blog available under <a href="http://blog.chalda.cz" class="bare">http://blog.chalda.cz</a> then I set there <code>blog.chalda.cz</code>.
My user page should be available under <a href="http://chalda.cz" class="bare">http://chalda.cz</a> then I set there <code>chalda.cz</code>.
Now when you do so GitHub starts with automatic recirection to the custom domain.
In my case it means that going to <a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a> will
automatically redirect to <a href="https://chalda.cz" class="bare">https://chalda.cz</a>.</p>
</div>
<div class="paragraph">
<p>When you define something into <em>Custom domain</em> box then GitHub automatically creates
a file named <code>CNAME</code> with only one line consisting the specified Custom domain. Changing
or creating content of the <code>CNAME</code> file has the same result as setting that in the box
under <code>Settings</code> tab.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dns_settings">DNS settings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>First (probably obvious but&#8230;&#8203;) observation was that changes in settings are propagated
really in terms of hours, not sooner <span class="icon"><i class="fa fa-smile-o"></i></span></p>
</div>
<div class="paragraph">
<p>After spending some time with help of <a href="https://help.github.com/articles/troubleshooting-custom-domains/">GitHub documentation</a>
and some blog posts similar to this one I got the following settings started to work.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Documentation recommends using <code>ALIAS</code> DNS record for apex domain settings than
<code>A</code> record but <code>ALIAS</code> is not available in DNS settings of my provider.</p>
</div>
<div class="paragraph">
<p>I just took a <code>cz</code> domain from first offer came from Google search at <a href="http://domena.cz" class="bare">http://domena.cz</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a> has custom domain set as <code>chalda.cz</code></p>
</li>
<li>
<p><a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a> has custom domain set as <code>blog.chalda.cz</code></p>
</li>
<li>
<p>DNS settings</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>@ IN SOA ns1.ignum.com. hostmaster.ignum.cz. 2017020502 10800 3600 604800 3600
@ IN A 192.30.252.153
@ IN A 192.30.252.154
blog IN CNAME ochaloup.github.io.
www IN CNAME ochaloup.github.io.
@ IN NS ns1.ignum.com.
@ IN NS ns2.ignum.com.
@ IN TXT "v=spf1 include:_spf.ignum.cz ~all"
_autodiscover._tcp IN SRV 0 0 443 nmrdiscover.ignum.cz.</code></pre>
</div>
</div>
<div class="paragraph">
<p>For more information on <code>SOA</code>, <code>NS</code> and <code>TXT</code> record check some DNS documentation.
Here briefly what I understood - <code>SOA</code> is compulsory, defines who is responsible
for domain, <code>NS</code> is required by my provider here and defines where name servers
for this domains are, <code>TXT</code> serves information about the server (e.g. dns account info).</p>
</div>
<div class="paragraph">
<p>Now the <code>A</code> records are needed for apex domain <code>chalda.cz</code> redirection works.
It points to  GitHub DNS servers diretly.
The <code>blog</code> (for redirect to <em>project page</em>) uses <code>CNAME</code> record
and points to my <code>github.io</code>.
Finally <code>www</code> <code>CNAME</code> record serves to get available my <em>user page</em> at domain
<a href="http://chalda.cz" class="bare">http://chalda.cz</a> and <a href="http://www.chalda.cz" class="bare">http://www.chalda.cz</a>. (TODO: here does not work or what?)</p>
</div>
<div class="sect2">
<h3 id="_tools_to_help">Tools to help</h3>
<div class="paragraph">
<p>When I start to play with setup I found out two tools helpful.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>command <code>dig</code> - <code>dig chalda.cz</code>. With a more consense output
<code>dig chalda.cz +nostats +nocomments +nocmd</code></p>
</li>
<li>
<p>Chrome developer tools (Ctrl+Shift+I) - got to tab <em>Network</em>, enable checkbox <em>Preserve log</em>
and go to e.g. <a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a>. You can see in headers that you were redirected
to <a href="http://chalda.cz" class="bare">http://chalda.cz</a> by <code>301 Moved Permanently</code>. If you do some changes then info that the page
was moved permanently is remembered in browser cache and browser then directly shows you the <a href="http://chalda.cz" class="bare">http://chalda.cz</a>
without consultation with DNS server (<code>301 Moved Permanently (from disk cache)</code>). To workaround that clear
the Chrome&#8217;s cache - go to <code>chrome://net-internals</code>, click a <em>small down pointing arrow in right corner</em>
and choose <em>Tools &#8594; Clear cache</em> from drop down menu.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</guid><category><![CDATA[github]]></category><category><![CDATA[dns]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 06 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Links]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>List of links I found interesting</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_transactions">Transactions</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.youtube.com/watch?v=5ZjhNTM8XU8">Transactions: myths, surprises and opportunities</a></dt>
<dd>
<p>presentation by Martin Kleppmann for Strange Loop 2015. He summarizes what is transaction, what ACID means, how disstributed world changed the perception.</p>
</dd>
<dt class="hdlist1"><a href="https://www.infoq.com/minibooks/JTDS">Java Transaction Design Strategies, ebook</a></dt>
<dd>
<p>perfect introduction to transaction in Java. You will learn what is local
transaction, global transaction, two-phase commit, what you can expect from JTA and most of the examples are for Java EE and Spring too.</p>
</dd>
<dt class="hdlist1"><a href="https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/">Replicated Data Consistency Explained Through Baseball</a></dt>
<dd>
<p>eventual consistency explained on the example of the baseball game. I find it really comprehensible and nicely written.</p>
</dd>
<dt class="hdlist1"><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">The Log: What every software engineer should know about real-time data&#8217;s unifying abstraction</a></dt>
<dd>
<p>I find this (quite long) article perfect summary of what the event sourcing is about. This is look from stream processing side "point of view" but all that gives much sense. How the stream processing and event source differs or what they are in common is nicely taken by presentation by Martin Klepmann at <a href="https://www.youtube.com/watch?v=avi-TZI9t2I">Event Sourcing and Stream Processing at Scale,
Domain-Driven Design Europe 2016</a></p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_design">Design</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.youtube.com/watch?v=STKCRSUsyP0">The Many Meanings of Event-Driven Architecture</a></dt>
<dd>
<p>nice summary of meening of terms that you hit when reading about event-driven design. I like how the presentation was informative but comperehensible.</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java">Java</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.ibm.com/developerworks/library/j-nativememory-linux">Thanks for the memory, Linux</a></dt>
<dd>
<p>awsome article about Java memory management in Linux and mainly on topic of native memory issues.
There is another article talking about this topic
<a href="https://www.ibm.com/developerworks/java/library/j-nativememory-aix/">on AIX too</a>.</p>
</dd>
</dl>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/05/Links.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/05/Links.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Fri, 05 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Blog posts history]]></title><description><![CDATA[<div class="sect2">
<h3 id="_2017">2017</h3>
<div class="ulist">
<ul>
<li>
<p>[2017-09-30] <a href="http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html" class="bare">http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</a></p>
</li>
<li>
<p>[2017-08-25] <a href="https://developer.jboss.org/wiki/Three-phaseCommitProtocol" class="bare">https://developer.jboss.org/wiki/Three-phaseCommitProtocol</a></p>
</li>
<li>
<p>[2017-06-14] <a href="http://jbossts.blogspot.cz/2017/06/sagas-and-how-they-differ-from-two.html" class="bare">http://jbossts.blogspot.cz/2017/06/sagas-and-how-they-differ-from-two.html</a></p>
</li>
<li>
<p>[2017-05-25] <a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC" class="bare">https://developer.jboss.org/wiki/TwoPhaseCommit2PC</a></p>
</li>
<li>
<p>[2017-05-06] <a href="http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html" class="bare">http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</a></p>
</li>
<li>
<p>[2017-05-06] <a href="http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html" class="bare">http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</a></p>
</li>
<li>
<p>[2017-05-05] <a href="http://blog.chalda.cz/2017/05/05/Links.html" class="bare">http://blog.chalda.cz/2017/05/05/Links.html</a></p>
</li>
<li>
<p>[2017-05-05] <a href="http://blog.chalda.cz/2017/01/01/About-the-blog.html" class="bare">http://blog.chalda.cz/2017/01/01/About-the-blog.html</a></p>
</li>
</ul>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/05/Blog-posts-history.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/05/Blog-posts-history.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Fri, 05 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[About the blog]]></title><description><![CDATA[<div class="paragraph">
<p>What is this about?</p>
</div>
<div class="paragraph">
<p>&#8230;&#8203;just another blog where you can find notes from somebody&#8217;s work programming life.</p>
</div>
<div class="paragraph">
<p>And that should be it.</p>
</div>
<div class="paragraph">
<p>There is still a motivation for doing that, sure. Few reasons said solely selfish.</p>
</div>
<div class="paragraph">
<p>First one is showing that I like what I&#8217;m doing and this passion could potentialy help somebody.
The kick of for me thinking about such thing was
<a href="https://vimeo.com/99516367">presentation Jurgen Appelo at GeeCon 2014</a>. I watched several
other presentations from Jurgen afterwards but this one somehow influenced thinking of me.</p>
</div>
<div class="paragraph">
<p>The second is my infinite fight with recording knowledge. I usualy read something and
I forget what that thing was about after few weeks. If not used in short period of time then
it goes to <code>/dev/null</code> black hole.
I found out that putting down few notes summarized in my own words helps me
in this endeavour. Plus it works as kind of time machine to get back in time
to understand what I was thinking to understand <span class="icon"><i class="fa fa-smile-o"></i></span>.</p>
</div>
<div class="paragraph">
<p>Yeap, the only trouble is that writing such notes take a good amount of time.
But most probably it&#8217;s worthy.</p>
</div>]]></description><link>http://blog.chalda.cz/2017/01/01/About-the-blog.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/01/01/About-the-blog.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sun, 01 Jan 2017 00:00:00 GMT</pubDate></item></channel></rss>