<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chalda's blog]]></title><description><![CDATA[Notes for not being forgotten]]></description><link>http://blog.chalda.cz</link><image><url>/images/cover.jpg</url><title>Chalda&apos;s blog</title><link>http://blog.chalda.cz</link></image><generator>RSS for Node</generator><lastBuildDate>Wed, 03 Jan 2018 12:14:49 GMT</lastBuildDate><atom:link href="http://blog.chalda.cz/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[How to work with a docker image to Minishift repository]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/docker-to-openshift.png" alt="docker to openshift.png">
</div>
</div>
<div class="paragraph">
<p><em>this is a bit follow-up article to <a href="http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html" class="bare">http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html</a></em></p>
</div>
<div class="paragraph">
<p>Minishift is a "small version" of OpenShift where <a href="https://docs.openshift.org/latest/architecture/index.html">all the deployment setup</a>
is done as part of a virtual machine. This virtual machine could be managed by <a href="https://docs.openshift.org/latest/minishift/getting-started/installing.html">various hypervisors</a>.
The purpose is to give to developers an easy way to develop applications for OpenShift.
Which is why the Minishift is productized by Red Hat as <a href="https://developers.redhat.com/products/cdk/overview/">Red Hat Container Development Kit (Red Hat CDK 3)</a>.
<a href="https://github.com/minishift/minishift">Minishift</a> is kind of incarnation of <a href="https://github.com/kubernetes/minikube">MiniKube</a> for OpenShift.</p>
</div>
<div class="paragraph">
<p>Minishift serves as manager of docker containers and anything it works with is a docker container.
If you want to start an application running there you need to provide a docker container.
There is basically two ways to get the app there. Use the tool
<a href="https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#source-build">Source to image - S2I</a>
or get a docker image and set it up for Minishift to consume it.
For development purposes the S2I way is not appropriate and we will elaborate on the second option.</p>
</div>
<div class="paragraph">
<p>Minishift provides a <a href="https://docs.docker.com/registry/">private docker registry</a> where any docker image,
used by the Minishift platform, is put into it. If you have a docker image of your desire
in the Minishift registry you can start the app. Kubernetes/OpenShift/Minishift adds one more layer of abstraction
on top of this which is <a href="https://blog.openshift.com/image-streams-faq/">image stream</a>.
The image stream holds a <a href="https://access.redhat.com/documentation/en-us/openshift_enterprise/3.2/html/developer_guide/dev-guide-managing-images">metadata about image and can make "a binding"</a>
of the docker image to an application.</p>
</div>
<div class="paragraph">
<p>You can find out what are image streams available at the Minishift instance by calling
<code>oc get imagestreams</code> (or <code>oc get is</code>). The application can be created base of it
by calling <code>oc new-app --image-stream=eap7 --name=eap7</code>. If there is created an image stream
and application started from it then (by default) whenever you will push a new image to the private registry
the application is redeployed with the new version.
Whenever you push/pull something to the registry a <a href="https://blog.openshift.com/image-streams-faq">new image stream (if does not exists) is created</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># creating new application from a docker image centos/postgresql-96-centos7
# the image is search on dockerhub, pulled to private registry and new image stream is created,
# then the app is started
oc new-app --docker-image=centos/postgresql-96-centos7 --name=postgresql-96-centos7

oc get is
NAME                    DOCKER REPO                                       TAGS      UPDATED
postgresql-96-centos7   172.30.1.1:5000/myproject/postgresql-96-centos7   latest    6 minutes ago

# if there is the image already existing in the internal repository I can start an application
# directly from the image stream by name
docker push docker-registry-default.192.168.99.100.nip.io:443/myproject/postgresql-96-centos7
oc new-app --image-stream=postgresql-96-centos7 --name=postgresql-96-centos7

# NOTE: for the postgresql image would start we need to define compulsory env properties
oc env dc/postgresql-96-centos7 -e POSTGRESQL_USER=crashrec -e POSTGRESQL_PASSWORD=crashrec -e POSTGRESQL_DATABASE=crashrec
# checking how that was started
oc logs dc/postgresql-96-centos7</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>I&#8217;m using term 'a Minishift application' here but application in Minishift is
composed with several OpenShift objects. (By default) one of them is the ImageStream which
defines the link between docker image and the running docker image in the Minishift environment.</p>
</div>
<div class="paragraph">
<p>If you run <code>oc new-app</code> you can check what are the objects being created - see section 'Creating resources'</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>oc new-app --image-stream=postgresql-96-centos7 --name=postgresql-96-centos7
--&gt; Found image 75740e5 (3 days old) in image stream "myproject/postgresql-96-centos7"
    under tag "latest" for "postgresql-96-centos7"
  ...
--&gt; Creating resources ...
    deploymentconfig "postgresql-96-centos7" created
    service "postgresql-96-centos7" created
--&gt; Success
    Run 'oc status' to view your app.</code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Ok, now we know we want to have an image in the Minishift repository but how to do so.
There are two options, I&#8217;m aware of.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>push image of your localhost docker registry to the Minishift registry</p>
</li>
<li>
<p>configure shell environment to use Minishift docker environment and build image with that (inside such configured shell)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pushing_from_local_docker_to_minishift_registry">Pushing from local docker to Minishift registry</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For being able to push to Minishift registry from outside world we need two basic things</p>
</div>
<div class="ulist">
<ul>
<li>
<p>expose the Minishift registry to the outside world</p>
</li>
<li>
<p>permit local docker to push to insecure Minishift registry</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There is another good article talking about this:
<a href="https://torstenwalter.de/minishift/openshift/docker/registry/2017/07/25/build-docker-image-and-upload-to-openshift-registry.html" class="bare">https://torstenwalter.de/minishift/openshift/docker/registry/2017/07/25/build-docker-image-and-upload-to-openshift-registry.html</a></p>
</div>
<div class="paragraph">
<p>Let&#8217;s look at the steps</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># starting minishift
minishift start
# exposing minishift docker registry
# WARN !!! : use Minishift version 1.9 or later !!!
minishift addon apply registry-route
# the hostname of exposed registry should be printed, something like docker-registry-default.192.168.99.100.nip.io

# now the docker on localhost machine needs to get permitted to push to non-https
su -
cp /etc/sysconfig/docker /etc/sysconfig/docker.bkp
sed -i "s/\(OPTIONS.*\)'/\1 --insecure-registry docker-registry-default.192.168.99.100.nip.io:443'/" /etc/sysconfig/docker
# check your /etc/sysconfig/docker have options variable defined as
#   OPTIONS='--selinux-enabled --log-driver=journald --insecure-registry docker-registry-default.192.168.99.100.nip.io:443'
exit

# restart docker
sudo systemctl restart docker

# tag the postgresql image image as docker-registry-default.192.168.99.100.nip.io:443/&lt;project&gt;/&lt;name of stream&gt;:latest
docker tag docker.io/centos/postgresql-96-centos7 docker-registry-default.192.168.99.100.nip.io:443/myproject/postgresql-96-centos7
# it's necessary to login to the Minishift registry. You need to check the security token by running 'oc whoami -t'
# of the running minishift in shell script where oc is configured
# As one-liner that could be done as
docker login -u developer -p `oc whoami -t` docker-registry-default.192.168.99.100.nip.io:443
# pushing image to the docker registry
docker push docker-registry-default.192.168.99.100.nip.io:443/myproject/postgresql-96-centos7

# at this time the image stream with name 'postgresql-96-centos7' under project 'myproject'
# should be created

# the new application could be run
oc new-app --image-stream=postgresql-96-centos7 --name=postgresql-96-centos7
# compulsory environmental variables
oc env dc/postgresql-96-centos7 -e POSTGRESQL_USER=crashrec -e POSTGRESQL_PASSWORD=crashrec -e POSTGRESQL_DATABASE=crashrec</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_building_image_from_shell_with_minishift_docker_environment_setup">Building image from shell with Minishift docker environment setup</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In summary the following is needed</p>
</div>
<div class="ulist">
<ul>
<li>
<p>setup shell environment to use Minishift docker</p>
</li>
<li>
<p>if needed to get docker image from insecure registry setup Minishift to permit so</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For setting the docker shell environment of Minishift see
<a href="https://github.com/minishift/minishift/blob/master/docs/source/openshift/openshift-docker-registry.adoc" class="bare">https://github.com/minishift/minishift/blob/master/docs/source/openshift/openshift-docker-registry.adoc</a></p>
</div>
<div class="paragraph">
<p>Let&#8217;s look at the steps</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># Starting with the Minishift insecure registry setup
# I haven't find a way to say minishift to pull the image from unknown
# registry via some parameter
# aka. minishift start --insecure-registry does not work for me for some reason
# the global Minishift setup is needed
# (we need to have defined the 172.30.0.0/16 as default settings)
minishift stop
minishift delete
minishift config set insecure-registry 172.30.0.0/16,my-insecure-registry.io:8080
minishift start

# now the docker pull will work
docker pull my-insecure-registry.io:8080/project/myproject


# Setting up the shell environment to use Minishift docker
eval $(minishift docker-env)

# going to place with Dockerfile
cd postgresql
docker build . --tag mypostgresql

# NOTE: Minishift version 1.10
# the following commands worked for me but I'm not sure why this is not now.
# I expect this being a bug.
docker tag mypostgresql $(minishift openshift registry)/myproject/mypostgresql
docker push $(minishift openshift registry)/myproject/mypostgresql
oc new-app --image-stream=mypostgresql --name=mypostgresql

# another approach is use oc build (running the docker build underneath)
# we will create a new image stream with name 'mypostgresql', this is because we defined
# --binary option - nothing is downloaded, just metadata created
oc new-build --binary --name=mypostgresql -l app=mypostgresql
# running the docker build on the Dockerfile of the current directory and pushing to the
# already defined image stream with the same name
oc start-build mypostgresql --from-dir=. --follow
# creating an app from the image stream
oc new-app --image-stream=mypostgresql --name=mypostgresql

# as abbreviation should be fine to create a new app only with command
# where app is named as defined and the imagestream of the same name is searched for
oc new-app mypostgresql</code></pre>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html</guid><category><![CDATA[docker]]></category><category><![CDATA[minishift]]></category><category><![CDATA[OpenShift]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Mon, 18 Dec 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Docker tags and registries]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/docker-tag.png" alt="docker tag.png">
</div>
</div>
<div class="paragraph">
<p>As a newcomer to the world of <a href="http://docker.io">Docker</a> and I struggle a bit with basic concepts. Here, I would like to summarize my observation about Docker tagging and repositories.</p>
</div>
<div class="paragraph">
<p>If you build a Dockerfile (<code>docker build .</code>) you get a docker image. That&#8217;s identified with a hash. You can take it and
start it (<code>docker run &lt;image_hash&gt;</code>) as a docker container.
But using a hash hash as reference to an existing "app"
is just hard. How can a human remember and differentiate them? That&#8217;s where you can name (<em>tag</em>) the image with command <code>docker tag &lt;image_hash&gt; &lt;tag_name&gt;</code>. When you do so
you can start the container then with <code>docker run &lt;tag_name&gt;</code>.</p>
</div>
<div class="paragraph">
<p>There is an convention about tag name in docker which is:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>{REGISTRY}/{PROJECT}/{IMAGE_NAME}:{IMAGE_VERSION}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The format is not compulsory but the docker client understands the convention and it&#8217;s what the commands <code>docker pull</code>/<code>docker push</code> work with.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s investiage a bit on it. From right to left - we have a <em>IMAGE_VERSION</em> here. It&#8217;s an arbitrary
string and is up to you how that looks like. You can tag an image as
<code>docker tag &lt;hash&gt; &lt;tag_name&gt;:1.0</code> and later with new version of your app as <code>docker tag &lt;hash&gt; &lt;tag_name&gt;:1.1</code>.
But nobody checks or guarantees that the tag version <code>1.1</code> is somehow newer than the <code>1.0</code>.
There is a convention of version <code>latest</code>. That represents a <strong>default version</strong>
which is used when you don&#8217;t define a version manually. I like this article
<a href="http://container-solutions.com/docker-latest-confusion">Docker: The latest Confusion</a>
which explains that <code>latest</code> is not related to <em>time</em> but the meaning is rather <em>default</em>.</p>
</div>
<div class="paragraph">
<p>The <em>IMAGE_NAME</em> is name of your app for you being able to differentiate and refer to it.</p>
</div>
<div class="paragraph">
<p>The <em>PROJECT</em> and <em>REGISTRY</em> is used to know where this image belongs to or where it comes from.
If you push or pull an image to the Docker registry you define where it is by this section of the tag definition.
There is no <code>docker</code> command line option <em>--registry=&lt;REGISTRY&gt;</em>. The information where to push to is taken from the tag.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_docker_build_example">Docker build example</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s say I have here a <code>Dockerfile</code> with env variables definition for Centos PostgreSQL image.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-dockerfile" data-lang="dockerfile">FROM centos/postgresql-96-centos7

ENV POSTGRESQL_DATABASE crashrec
ENV POSTGRESQL_USER crashrec
ENV POSTGRESQL_PASSWORD crashrec
ENV POSTGRESQL_MAX_PREPARED_TRANSACTIONS 50</code></pre>
</div>
</div>
<div class="paragraph">
<p>Running of <code>docker build .</code>, at the directory where the <code>Dockerfile</code> resides, provides output</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>Sending build context to Docker daemon 11.78 kB
Step 1/15 : FROM centos/postgresql-96-centos7
 ---&gt; 75740e572487
Step 2/15 : ENV POSTGRESQL_DATABASE crashrec
 ---&gt; Using cache
 ---&gt; 3caf03ae8e7d
    ...
 ---&gt; Using cache
 ---&gt; 4188383000de

 Successfully built 4188383000de</code></pre>
</div>
</div>
<div class="paragraph">
<p>I can take the image hash <code>4188383000de</code> and tag it with name. <code>docker tag 4188383000de postgresql-9.6-centos</code>.
By running <code>docker images</code> I can verify the assignment of the hash to the tag.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>docker images
REPOSITORY               TAG       IMAGE ID        CREATED          SIZE
postgresql-9.6-centos    latest    4188383000de    9 minutes ago    337 MB
...</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The  listing uses terms <em>REPOSITORY</em> and <em>TAG</em> in way of I used here <em>name</em> and <em>version</em>.</p>
</li>
<li>
<p>I haven&#8217;t defined any version but the image name was assigned with the <em>default</em> <code>latest</code>.</p>
</li>
<li>
<p>As there is not defined a registry (only name a.k.a  <code>${PROJECT}/${IMAGE_NAME}</code>) the image is search in the predefined registres (see <em>ADD_REGISTRY</em> below). If found then it&#8217;s downloaded. But you can download the image manually with <code>docker pull</code> and then as such named image already resides in the local cache it will be taken from there.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pushing_image">Pushing image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The next step could be to mark the image with repository name and thus being able to push it there.
My account at <a href="http://dockerhub.com/">Docker hub</a> is <a href="https://hub.docker.com/r/ochaloup/" class="bare">https://hub.docker.com/r/ochaloup/</a>. Thus my
regitry name to be used for being able to push there is <code>ochaloup</code>.</p>
</div>
<div class="paragraph">
<p>The tag then defines registry <code>docker.io</code> for <code>docker push</code> can publish the image there.</p>
</div>
<div class="paragraph">
<p>The whole name is then <code>docker.io/ochaloup/postgresql-9.6-centos</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">docker tag postgresql-9.6-centos docker.io/ochaloup/postgresql-9.6-centos
docker push docker.io/ochaloup/postgresql-9.6-centos</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
maybe login to the docker.io will be needed first: <code>docker login docker.io -u ochaloup</code>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pulling_image">Pulling image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If we want to run some image we can just run it</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>docker run --env POSTGRESQL_DATABASE=crashrec --env POSTGRESQL_USER=crashrec\
--env POSTGRESQL_PASSWORD=crashrec centos/postgresql-96-centos7`</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can say what is the repository we want the image from explicitly</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>docker run --env POSTGRESQL_DATABASE=crashrec --env POSTGRESQL_USER=crashrec\
--env POSTGRESQL_PASSWORD=crashrec  docker.io/centos/postgresql-96-centos7</code></pre>
</div>
</div>
<div class="paragraph">
<p>Using the <code>docker.io</code> is not necessary because docker searches through all predefined registries if there is such
image. And the Docker hub is the default one where to search for the image.</p>
</div>
<div class="paragraph">
<p>You can see that I haven&#8217;t used any <code>version</code> parameter thus the <em>default</em> latest version was used.</p>
</div>
<div class="paragraph">
<p>Of course we could want <a href="https://hub.docker.com/r/centos/postgresql-94-centos7/tags/">some specific version</a> to be run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>docker run --env POSTGRESQL_DATABASE=crashrec --env POSTGRESQL_USER=crashrec\
--env POSTGRESQL_PASSWORD=crashrec  docker.io/centos/postgresql-96-centos7:9.6</code></pre>
</div>
</div>
<div class="paragraph">
<p>If we don&#8217;t want to directly run the image but you want it to be downloaded to the local machine (to the <a href="https://thenewstack.io/understanding-the-docker-cache-for-faster-builds/">docker cache</a>),
you can use <code>docker pull</code> command. The following output says the image was already downloaded
as the <code>docker run</code> command was already run and it downloads first and then run the image.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>docker pull centos/postgresql-96-centos7

Using default tag: latest
Trying to pull repository brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/centos/postgresql-96-centos7 ...
Pulling repository brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/centos/postgresql-96-centos7
Trying to pull repository docker.io/centos/postgresql-96-centos7 ...
sha256:88c5f8ffb934cc63f7eb819e3328c0380887c206fa6280c553a0a6385fa59e63: Pulling from docker.io/centos/postgresql-96-centos7
...
Status: Image is up to date for docker.io/centos/postgresql-96-centos7:latest</code></pre>
</div>
</div>
<div class="paragraph">
<p>I can name it as e.g. <code>pgsl</code> like <code>docker tag docker.io/centos/postgresql-96-centos7 pgsl</code> and
run it <code>docker run pgsl &#8230;&#8203;</code> and I&#8217;m still starting the same image.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_docker_insecure_registries">Docker insecure registries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The list of repositories which are check for existence of the image (if not defined explicitly)
are hardcoded in docker config and can&#8217;t be changed by a parameters.</p>
</div>
<div class="paragraph">
<p>If you want to pull image with the respository defined explicitly the repository needs to be running over <code>https</code>. If communication goes over <code>http</code> then <code>docker pull</code> fails.</p>
</div>
<div class="paragraph">
<p>In such case you need to add permition for docker to allow it to pull from that particular insecure registry.</p>
</div>
<div class="sect2">
<h3 id="_insecure_registries_set_up">Insecure registries set up</h3>
<div class="sect3">
<h4 id="_configuration_with_rpm_package_docker">Configuration with RPM package docker</h4>
<div class="paragraph">
<p>On my Fedora 26 when using rpm package <code>docker</code> I need to edit file <code>/etc/sysconfig/docker</code> and add such registry to
the list of <code>OPTIONS</code>. For example for the usage of Minishift private registry the <code>OPTIONS</code> parametr looks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>OPTIONS='--selinux-enabled --log-driver=journald --insecure-registry docker-registry-default.192.168.99.100.nip.io:443'</code></pre>
</div>
</div>
<div class="paragraph">
<p>You will need to <code>restart</code> docker after the change and you can pull from the non-https registry now.</p>
</div>
</div>
<div class="sect3">
<h4 id="_fedora_26_registry_and_insecure_registry_patch">Fedora 26 - registry and insecure registry patch</h4>
<div class="paragraph">
<p>In case of Red Hat clone of the docker client you can use settings described in article
<a href="https://access.redhat.com/articles/1354823" class="bare">https://access.redhat.com/articles/1354823</a></p>
</div>
<div class="paragraph">
<p>In short you can use <code>ADD_REGISTRY</code> and <code>INSECURE_REGISTRY</code> variables in <code>/etc/sysconfig/docker</code>.
(<em>ADD_REGISTRY</em> are registries search for the image when not defined explicitly by user)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>echo "ADD_REGISTRY='--add-registry docker-registry-default.192.168.99.100.nip.io:443'" &gt;&gt; /etc/sysconfig/docker
echo "INSECURE_REGISTRY='--insecure-registry docker-registry-default.192.168.99.100.nip.io:443'" &gt;&gt; /etc/sysconfig/docker</code></pre>
</div>
</div>
<div class="paragraph">
<p>This works for me on Fedora 26 when I have installed docker <code>package</code>.
A trouble with docker package for me came with some other images (e.g. for Oracle XE: <a href="https://hub.docker.com/r/wnameless/oracle-xe-11g">wnameless/oracle-xe-11g</a>
where issue <a href="https://github.com/wnameless/docker-oracle-xe-11g/issues/59" class="bare">https://github.com/wnameless/docker-oracle-xe-11g/issues/59</a> talks about troubles with <code>docker</code> package and <code>docker-ce</code> is needed to be used instead.</p>
</div>
</div>
<div class="sect3">
<h4 id="_rpm_docker_ce_to_be_configured_for_insecure_registries">RPM docker-ce to be configured for insecure registries</h4>
<div class="paragraph">
<p>Installation of <code>docker-ce</code> (replacing <code>docker</code>) is nicely introduced at guide <a href="https://docs.docker.com/engine/installation/linux/docker-ce/fedora/" class="bare">https://docs.docker.com/engine/installation/linux/docker-ce/fedora/</a>.</p>
</div>
<div class="paragraph">
<p>Now what about the registries config. I found nice description at: <a href="https://forums.docker.com/t/error-with-docker-pull-from-insecure-registry/31007/8" class="bare">https://forums.docker.com/t/error-with-docker-pull-from-insecure-registry/31007/8</a></p>
</div>
<div class="paragraph">
<p>The <code>docker-ce</code> rpm pakcage has config at <code>/lib/systemd/system/docker.service</code>. After installation I needed to change and add lines</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">[Service]
Type=notify
EnvironmentFile=-/etc/sysconfig/docker
ExecStart=/usr/bin/dockerd $OPTIONS

# I have left the rest of the config file untouched
# ....</code></pre>
</div>
</div>
<div class="paragraph">
<p>From that I redirected the configuration of the <code>OPTIONS</code> variable to file <code>/etc/sysconfig/docker</code> where I added my insecured registry just at a separate line like</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">OPTIONS='--insecure-registry default.192.168.99.100.nip.io:443'</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
docker restart could be needed in way
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>sudo systemctl daemon-reload
sudo systemctl restart docker</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_other_oses_and_docker_registry_configuration">Other OSes and docker registry configuration</h4>
<div class="paragraph">
<p><strong>DISCLAIMER</strong>: the following is untested</p>
</div>
<div class="paragraph">
<p>For the other OSes, you need to change probably the <code>/etc/docker/daemon.json</code> with</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "registry-mirrors": ["docker-registry-default.192.168.99.100.nip.io:443"],
  "insecure-registries" :["docker-registry-default.192.168.99.100.nip.io:443"]
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><em>There is a follow-up article about Minishift private registry at <a href="http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html" class="bare">http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html</a></em></p>
</div>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html</guid><category><![CDATA[docker]]></category><category><![CDATA[minishift]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Fri, 15 Dec 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Starting Minishift without internet connection]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/open_shift.png" alt="open shift.png">
</div>
</div>
<div class="paragraph">
<p>The <a href="https://github.com/minishift/minishift">Minishift</a> is an tool which provides an easy way to run <a href="https://www.openshift.org">OpenShift</a> locally on developer&#8217;s machine. Minishift uses an hypervisor to start a virtual machine where the whole OpenShift environment is set up. Thus you can start, stop and delete the whole environment in seconds.</p>
</div>
<div class="paragraph">
<p>For the easy resolution of Minishift addresses there is used DNS <a href="http://nip.io" class="bare">http://nip.io</a> (<a href="http://xip.io" class="bare">http://xip.io</a> times before) which translate the DNS query to address mentioned befor the <code>nip.io</code> suffix.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">host 127.0.0.7.nip.io
127.0.0.7.nip.io has address 127.0.0.7</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you create an OpenShift route in Minishift it uses the <code>nip.io</code> for translation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">oc get routes</code></pre>
</div>
</div>
<div class="paragraph">
<p>gets the output similar to this</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top" colspan="5">&#8230;&#8203;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">NAME</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">HOST/PORT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">SERVICES</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">PORT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">WILDCARD</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">hola</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">hola-helloworld-msa-lra.app.192.168.99.100.nip.io</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">hola</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">8080-tcp</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">None</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" colspan="5"><p class="tableblock">&#8230;&#8203;</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>This causes a trouble if you run the Minishift when you are not online. There is a chance to start your local DNS server and let make the translation on your machine. I was trying the <a href="https://github.com/basecamp/xip-pdns" class="bare">https://github.com/basecamp/xip-pdns</a> but probably as I&#8217;m not a good Linux administrator it does not succeed.</p>
</div>
<div class="paragraph">
<p>Then I found about existence <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq service</a> which works for me. On my Fedora 26</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># install the service
dnf install dnsmasq

# -- Adding configuration for the translation to the end of the config file
vim /etc/dnsmasq.conf
#
# Reverse DNS record for master
host-record=master.192.168.99.100.nip.io,192.168.1.100
# Wildcard DNS for OpenShift Applications - Points to Router
address=/192.168.99.100.nip.io/192.168.99.100

# Start the service
systemctl start dnsmasq</code></pre>
</div>
</div>
<div class="paragraph">
<p>From now the dnsmasq should be returning the DNS requests on <code>192.168.99.100.nip.io</code> to <code>192.168.99.100</code> which is the address where Minishift was started on (see the <code>oc get routes</code> commands, output in the table above)</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_more_to_investigate">More to investigate</h3>
<div class="ulist">
<ul>
<li>
<p>If network is first up and then put down the DNS resolution inside of the Minishift seems retries to connect to outside network and it takes time until <code>dnsmasq</code> is used. An one request could take 10 seconds.</p>
</li>
<li>
<p><a href="https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md">Usage of</a> <code>--public-hostname</code> and <code>--routing-suffix</code> could help in configuration but somehow does not work for me.</p>
</li>
</ul>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/11/23/Starting-Minishift-without-internet-connection.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/11/23/Starting-Minishift-without-internet-connection.html</guid><category><![CDATA[openshift]]></category><category><![CDATA[minishift]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Thu, 23 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Set up HAProxy to balance by HTTP header balancing]]></title><description><![CDATA[<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/haproxy_logo.png" alt="haproxy logo.png">
</div>
</div>
<div class="paragraph">
<p>I started to experiment with <a href="https://www.haproxy.org/">HAProxy</a> where these are few notes on how to start with.</p>
</div>
<div class="paragraph">
<p>I wanted to have HAProxy as a standalone program and not installed into my Linux machine with package system. Thus</p>
</div>
<div class="ulist">
<ul>
<li>
<p>download HAProxy from <a href="https://www.haproxy.org" class="bare">https://www.haproxy.org</a>, I used downloading <em>bz2</em> archive from column <em>Latest version</em>.</p>
</li>
<li>
<p><code>tar xfz haproxy-*.tar.gz</code></p>
</li>
<li>
<p><code>cd haproxy-*/</code></p>
</li>
<li>
<p><code>make TARGET=generic</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>At this time the HAProxy is built and could be run. For the start it&#8217;s <code>./haproxy&#8201;&#8212;&#8201;config-file.cfg</code>. (start with ones situated at folder <code>tests</code>).</p>
</div>
<div class="paragraph">
<p>For experimenting I downloaded WildFly 11 (<a href="http://wildfly.org/downloads" class="bare">http://wildfly.org/downloads</a>), started in two instances and deployed a simple servlet showing simple message of what instance handled the request.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">curl http://download.jboss.org/wildfly/11.0.0.Final/wildfly-11.0.0.Final.zip -o wfly.zip
unzip wfly.zip &amp;&amp; mv wildfly-11.0.0.Final w1
unzip wfly.zip &amp;&amp; mv wildfly-11.0.0.Final w2

# running in two different consoles
cd w1 &amp;&amp; ./bin/standalone.sh -Did=w1
cd w2 &amp;&amp; ./bin/standalone.sh -Did=w2 -Djboss.socket.binding.port-offset=100

# in the third console
git clone https://github.com/ochaloup/servlet-test.git
cd servlet-test &amp;&amp; mvn package
cp target/servlet-test.war ${HOME}/w1/standalone/deployments/
cp target/servlet-test.war ${HOME}/w2/standalone/deployments/</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we have two instances of WildFly application servers running at <code><a href="http://localhost:8080" class="bare">http://localhost:8080</a></code> and <code><a href="http://localhost:8180" class="bare">http://localhost:8180</a></code>. You can check if the servlet deployed sucessfully</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">curl -i -X GET http://localhost:8080/servlet-test/host</code></pre>
</div>
</div>
<div class="paragraph">
<p>You should get response containing header and text</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>X-processed-by: w1
...
url: http://localhost:8080/servlet-test/host at localhost:8080, 10.0.0.7, &lt;hostname&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s run the haproxy and check roundrobin loadbalancing. Go to the HAProxy installation directory and open <code>tests/test-connection.cfg</code>. Add to the <code>server</code> directive one more with port <code>8181</code>. You will have something similar to.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>listen httpclose
	option	httpclose
	bind	:8001
	server	srv 127.0.0.1:8080
	server	srv2 127.0.0.1:8180
	reqadd	X-request:\ mode=httpclose
	rspadd	X-response:\ mode=httpclose</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s start the HAProxy and check with <code>curl</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>./haproxy -- tests/test-connection.cfg</code></pre>
</div>
</div>
<div class="paragraph">
<p>and check with <code>curl</code>. Run several times and check how the header <code>X-processed-by</code> is changing plus you can see WildFly console log in the particular console window.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>curl -i -X GET  http://localhost:8001/servlet-test/host</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now let&#8217;s balance by url parameter. You need to redefine file <code>tests/test-url-hash.cfg</code> to contain the localhost and both ports where WildFly is running. Then you can run <code>curl</code> and alter the foo parameter and see what is the WildFly instance handling the requests.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">./haproxy -- tests/test-url-hash.cfg

curl -i -X GET localhost:8000/servlet-test/host?foo=one
curl -i -X GET localhost:8000/servlet-test/host?foo=thousands</code></pre>
</div>
</div>
<div class="paragraph">
<p>The algorithm for hashing the <code>foo</code> value could be changed to spread the load as expected <a href="http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-balance" class="bare">http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-balance</a> .</p>
</div>
<div class="paragraph">
<p>As the last resort let&#8217;s balance by HTTP header. Create a new cfg file (I just copied it from the <code>test-url-hash.cfg</code>, it&#8217;s not tuned in any way)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>global
	maxconn 100
	log		127.0.0.1 local0

listen  vip1
	log		global
	option		httplog
    bind		:8000
    mode		http
    maxconn		100
    timeout	client  5000
	timeout	connect 5000
	timeout	server  5000
	balance		hdr(long-running-action)
	server		srv1 127.0.0.1:8080
	server		srv2 127.0.0.1:8180

	# control activity this way
	stats		uri /stat</code></pre>
</div>
</div>
<div class="paragraph">
<p>And now run the <code>curl</code> and check what instance serves the requests.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">./haproxy -- tests/test-httpheader-hash.cfg

curl -i -X GET -H 'long-running-action: 1' localhost:8000/servlet-test/host
curl -i -X GET -H 'long-running-action: 2' localhost:8000/servlet-test/host</code></pre>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/11/16/Set-up-HA-Poxy-to-balance-by-HTTP-header-balancing.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/11/16/Set-up-HA-Poxy-to-balance-by-HTTP-header-balancing.html</guid><category><![CDATA[load.balance]]></category><category><![CDATA[haproxy]]></category><category><![CDATA[admin]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Thu, 16 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Groovy and XML]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/groovy_straw.png" alt="groovy straw.png">
</div>
</div>
<div class="paragraph">
<p>Manipulating with XML in some easy way is part of my journey to get an easy way to change WildFly <code>standalone.xml</code>. Use of the Groovy and its tools came to me with tool <a href="https://github.com/wildfly-extras/creaper">Creaper</a> which I use in testsuites I work on. (Creaper came from hands of my collegue <a href="https://twitter.com/_Ladicek">Láďa Thon</a>). The Creaper tool let you make changes of the configuration either through <a href="https://docs.jboss.org/author/display/WFLY/Command+Line+Interface">CLI commands</a> or with use of <a href="https://github.com/wildfly-extras/creaper#use">Groovy XML modification</a>.</p>
</div>
<div class="paragraph">
<p>Here I would like to sum up so of my observation of using XML with Groovy. Mostly similar to nice article at <a href="http://www.vogella.com/tutorials/Groovy/article.html#examples_xml" class="bare">http://www.vogella.com/tutorials/Groovy/article.html#examples_xml</a></p>
</div>
<div class="paragraph">
<p>WARN: DISCLAIMER. I&#8217;m not fully sure with accuracy of all the terms used below. I recommend to check the net. And let me know about issues here.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xml_manipulation_in_groovy_in_brief">XML manipulation in Groovy in brief</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are two common <a href="http://groovy-lang.org/processing-xml.html">approaches in Groovy to work with xml</a>.</p>
</div>
<div class="paragraph">
<p>One is <code>XMLParser</code> (<code>GPath</code> expressions could be used, <code>GPath</code> is <a href="http://groovy-lang.org/processing-xml.html#_gpath">a path expression language</a>) and here is an example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">def scopeNode = asNode().depthFirst().find {
  println it.name().getQualifiedName()
  it.name().getQualifiedName() == 'scope'
}
scopeNode.setValue('compile')</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
the method <code>find</code> is method of the Groovy object <code>Object</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The <code>XmlSlurper</code> allows to parse an XML document and returns an <code>GPathResult</code> object. You can use <code>GPath</code> expressions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xmlslurper_in_more_details">XMLSlurper in more details</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As the Creaper <a href="https://github.com/wildfly-extras/creaper/blob/master/commands/src/main/java/org/wildfly/extras/creaper/commands/foundation/offline/xml/GroovyXmlTransform.java#L123">uses XMLSlurper</a> I played more with it.</p>
</div>
<div class="paragraph">
<p>My point here is show some Groovy language picks that wasn&#8217;t obvious for me as I&#8217;m quite a nebiew in.</p>
</div>
<div class="paragraph">
<p>To start work with the <code>XMLSlurper</code> I use <a href="http://groovy-lang.org/groovyconsole.html">groovyConsole</a> - just start it and copy&amp;paste.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">import java.io.StringWriter
import groovy.xml.XmlUtil

xml =
'''&lt;server xmlns="urn:jboss:domain:4.0"&gt;
  &lt;profile&gt;
    &lt;subsystem xmlns="urn:jboss:domain:iiop-openjdk:1.0"&gt;
      &lt;initializers transactions="spec" security="identity"/&gt;
      &lt;properties&gt;
         &lt;property name="propname" value="propvalue" /&gt;
    &lt;/subsystem&gt;
  &lt;/profile&gt;
&lt;/server&gt;'''

// to get the variable printed to see the content
print xml

def root = new XmlSlurper().parseText(xml)

// get back the xml processed with XMLSlurper as a string
def writer = new StringWriter()
XmlUtil.serialize(root, writer);
print writer.toString()</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now the root contains the xml tree that could be navigated as <code>groovy.util.slurpersupport.GPathResult</code>
(<a href="http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/GPathResult.html" class="bare">http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/GPathResult.html</a>)
attributes with <code>dot notation</code> (<code>.</code>).
The root itself is type of <code>groovy.util.slurpersupport.NodeChildren</code>
(<a href="http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/NodeChildren.html" class="bare">http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/NodeChildren.html</a>)
which is defined as <em>lazy evaluated representation of child nodes</em> and it&#8217;s a child of the <code>GPathResult</code> class itself.</p>
</div>
<div class="paragraph">
<p>When using dot notation it&#8217;s easy to work with existing xml emlements</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">// having a subtree variable for further use
iiop = root.profile.subsystem
// changing existing attribute
iiop.initializers.@security = 'who needs security?'
// adding non-existing attribute to an existing node
iiop.initializers.'@my.attribute' = 'chalda'</code></pre>
</div>
</div>
<div class="paragraph">
<p>To check documentaiton on types you work with see</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/Attributes.html" class="bare">http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/Attributes.html</a></p>
</li>
<li>
<p><a href="http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/Attribute.html" class="bare">http://docs.groovy-lang.org/latest/html/gapi/groovy/util/slurpersupport/Attribute.html</a></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">assert groovy.util.slurpersupport.Attributes ==
  iiop.initializers.@security.getClass()
assert groovy.util.slurpersupport.Attribute ==
  iiop.initializers.@security.iterator().next().getClass()</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_chaning_attributes">Chaning attributes</h3>
<div class="paragraph">
<p>For saving a value of an attribute (attribute of a xml element) you can use method <code>text()</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">assert 'identity' == iiop.initializers.@security.text()
assert '' == iiop.initializers.@'non-existent'.text()

def m = [:]
println iiop.initializers*.attributes()
  .collectMany { it.entrySet() }
  .each { m.put(it.key, it.value) }
assert m == [security:'identity', transactions:'spec']

m = [:]
iiop.properties.property.iterator().each {
  list &lt;&lt; it.@name
  m &lt;&lt; [(it.@name.text()): it.@value.text()]
}
assert m == ['propname':'propvalue']</code></pre>
</div>
</div>
<div class="paragraph">
<p>When constructing the <code>GPathResult</code> definition you can use <a href="http://mrhaki.blogspot.cz/2009/08/groovy-goodness-string-strings-strings.html">GString expressions</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">def t = 'transactions'
assert 'spec' == iiop.initializers."@${t}".text()</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_removing_attributes">Removing attributes</h3>
<div class="paragraph">
<p>Having chance to remove an attribute there is need to touch actual <code>groovy.util.slurpersupport.Node</code> (<a href="http://docs.groovy-lang.org/latest/html/api/groovy/util/slurpersupport/Node.html" class="bare">http://docs.groovy-lang.org/latest/html/api/groovy/util/slurpersupport/Node.html</a>) or
<code>groovy.util.slurpersupport.NodeChild</code> (<a href="http://docs.groovy-lang.org/latest/html/api/groovy/util/slurpersupport/NodeChild.html" class="bare">http://docs.groovy-lang.org/latest/html/api/groovy/util/slurpersupport/NodeChild.html</a>).</p>
</div>
<div class="paragraph">
<p>When you get the <em>node</em> you can start working with its <code>name</code> or <code>attributes</code> as you need.
To get a <em>node</em> I got used to call one of methods which returns <code>Iterator</code>. There is a method <code>iterator()</code> which provides <code>NodeChild</code> or there is a method <code>nodeIterator()</code> which provides <code>Node</code>. For sure there are plenty other ways to get <em>nodes</em> as for example method <code>findAll()</code> and others.</p>
</div>
<div class="paragraph">
<p>Another way is usage of
<a href="http://docs.groovy-lang.org/latest/html/documentation/index.html#Collections-Gettingefficientwiththestar-dotoperator"><code>star-dot operator</code></a>
(a shortcut operator allowing you to call a method on all elements of a collection).</p>
</div>
</div>
<div class="sect2">
<h3 id="_node_iteration">Node iteration</h3>
<div class="paragraph">
<p>To iterate over all nodes at the current level - here it means iterating over all <code>initializers</code> nodes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">// -&gt; class groovy.util.slurpersupport.NodeChild
iiop.initializers.iterator().each {
  println it.getClass()
  println it.name()
}

// -&gt; class groovy.util.slurpersupport.Node
iiop.initializers.nodeIterator().each {
  println it.getClass()
  println it.name()
}

// -&gt; class groovy.util.slurpersupport.NodeChild
iiop.initializers.findAll({true}).each {
  println it.getClass()
  println it.name()
}

// -&gt; class groovy.util.slurpersupport.NodeChild
println iiop.initializers*.getClass()</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_child_nodes_iteration">Child nodes iteration</h3>
<div class="paragraph">
<p>Iterating over child nodes of the current level of nodes, use method <code>childNodes()</code> or <code>children()</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">// -&gt; class groovy.util.slurpersupport.Node
iiop.childNodes().each {
  println it.getClass()
  println it.name()
}

// -&gt; class groovy.util.slurpersupport.NodeChild
iiop.children().each {
  println it.getClass()
  println it.name()
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>For iteration over all nodes in the xml tree (traversing recursively) you need to use <code>GPath</code> methods <code>breadthFirst</code> or <code>depthFirst</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-goovy" data-lang="goovy">root.breadthFirst().each { println it.name() }</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_more_on_removing_attributes">More on removing attributes</h3>
<div class="paragraph">
<p>Removing an attribute is then piece of cake. Of course it could be done in multiple ways.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">iiop.initializers.nodeIterator().each {
  it.attributes().remove('transactions')
}
iiop.initializers*.attributes().each {it.remove('transactions')}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Obviously you can use  a <code>find</code> method to get single (first matching) result
in this case it will be a type <code>NodeChild</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">assert 1 == iiop.initializers.find {it.'@transactions' == 'spec'}.size()</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_removing_nodes">Removing nodes</h3>
<div class="paragraph">
<p>What about removing a node? It&#8217;s done by one of method <code>replaceNode</code> (if the current node itself is involved) or <code>replaceBody</code> (if content of the current node is involved). Methods accept a closure as parameter. The closure represents a new structure of the node. When the closure is empty then the node is removed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">iiop.initializers.replaceNode {}
iiop.replaceBody {}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_appending_nodes">Appending nodes</h3>
<div class="paragraph">
<p>The other method which works with closure as representation of a node structure is <code>appendNode</code>.</p>
</div>
<div class="paragraph">
<p>Both methods works with the fact that call of the closure is
<a href="http://groovy-lang.org/closures.html#_delegation_strategy">delegated</a>. Delegation references
a special handling of unknown method calls which are part of the closure definition. Any unknown
method call is then considered as definition of a new xml element and it&#8217;s method parameters
as attributes. You can then define a closure which is in fact definition of xml structure.
That one could be passed to a <code>appendNode</code> method.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">// -- node append
iiop.appendNode {
  'as-context' ('caller-propagation': 'supported')
}

// -- closure definition which is added as node later on
// properties to add definition
def myprops = ['goodone':'Frodo', 'evilone':'Saruman']
def props = {
  // unknown method 'properties' called with argument closure
     which defines an child xml element
  properties {
    // any call of 'property' defines an xml element where
       named arguments defines attributes
    for(itemkey in myprops.keySet()) property('name': itemkey, 'value': myprops.get(itemkey))
    // or add a new element named 'property-def' with attributes
       being defined by map 'myprops'
    'property-def'(myprops)
  }
}
iiop.appendNode props</code></pre>
</div>
</div>
<div class="paragraph">
<p>There is one shortcut as operator <code>&lt;&lt;</code> (<code>leftShift</code>) is overloaded and could be used instead of
method <code>appendNode</code>.</p>
</div>
<div class="paragraph">
<p>There could be a different ways for adding a node to an element</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">// first getAt returns 'NodeChild', the second getAt returns 'Node'
iiop.initializers.getAt(0).getAt(0).addChild({ good() })
iiop.initializers.nodeIterator().next().addChild({ 'really-good'() })</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Groovy does not require using brackets to pass parameters to a method call - e.g.</p>
</div>
<div class="paragraph">
<p><code>iiop &lt;&lt; { 'as-context' ('caller-propagation': 'supported') }</code></p>
</div>
<div class="paragraph">
<p>has the same effect as</p>
</div>
<div class="paragraph">
<p><code>iiop &lt;&lt; { 'as-context' 'caller-propagation': 'supported' }</code></p>
</div>
<div class="paragraph">
<p>But when you want to pass a parameters as a map, then this</p>
</div>
<div class="paragraph">
<p><code>iiop &lt;&lt; { 'as-context' ['caller-propagation': 'supported'] }</code></p>
</div>
<div class="paragraph">
<p>doesn&#8217;t work and you have to use parenthesis as this is a special case.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="_additional_notes">Additional notes</h4>
<div class="ulist">
<ul>
<li>
<p><code>iiop &lt;&lt; { test }</code> does nothing as expression <code>test</code> itself is not a method call</p>
</li>
<li>
<p><code>iiop &lt;&lt; { test() }</code> produces <code>&lt;test/&gt;</code> as <code>test()</code> is a method call</p>
</li>
<li>
<p><code>iiop &lt;&lt; { test(){} }</code> produces <code>&lt;test/&gt; as `test(){}</code> is a method call with a parameter of empty closure</p>
</li>
<li>
<p><code>iiop &lt;&lt; { test{} }</code> produces <code>&lt;test/&gt;</code> as <code>test {}</code> is a method call with
one parameter which is an empty closure (Groovy does not require parenthesis
to separate method arguments definition <code>test {}</code> is the same as <code>test ({})</code>)</p>
</li>
<li>
<p>one unnamed parameter defines a text which is added to the xml element
<code>iiop &lt;&lt; { test ('mytext') }</code> generates <code>&lt;test&gt;mytext&lt;/test&gt;</code>.</p>
</li>
<li>
<p>extending the previous point <code>iiop &lt;&lt; { test 'mytext' }</code> generates the same element with text <code>&lt;test&gt;mytext&lt;/test&gt;</code></p>
</li>
<li>
<p>for multiple method parameters only the last one is considered
<code>iiop &lt;&lt; { test('mytext', 'mytext2') }</code> produces <code>&lt;test&gt;mytext2&lt;/test&gt;</code></p>
</li>
<li>
<p>as it depends on order the content of closure could be ignored as well
<code>iiop &lt;&lt; { test({innerelement()}, 'mytext') }</code> produces element with text
<code>&lt;test&gt;mytext&lt;/test&gt;</code>. I haven&#8217;t found a way how to add a text for element and
a new child element at the same time.</p>
</li>
<li>
<p>named parameters are not considered when element receives as argument a map.
 Both definition generates the same <code>&lt;test mapid="mapvalue"/&gt;</code>:
<code>def mymap = ['mapid': 'mapvalue']; iiop &lt;&lt; {test('param1': 'value1', mymap)}</code> versus
<code>def mymap = ['mapid': 'mapvalue']; iiop &lt;&lt; {test(mymap, 'param1': 'value1')}</code></p>
</li>
<li>
<p>when needed to add <em>a nothing</em> then use <code>null</code>
<code>def isTest = false; iiop &lt;&lt; { isTest ? 'test'() : null }</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to check for existence of a node you are stick with checking size
of the result set.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">assert iiop.'non-existing-element'.isEmpty()
assert 0 == iiop.'non-existing-element'.size()
assert 0 == iiop.initializers.'@non-existing-attribute'.size()
assert 1 == iiop.initializers.'@transactions'.size()</code></pre>
</div>
</div>
<div class="paragraph">
<p>For sure there is a chance to add <a href="http://mrhaki.blogspot.cz/2009/12/groovy-goodness-implementing-metaclass.html">a new method</a> to write shorter more comprehensible code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">groovy.util.slurpersupport.GPathResult.metaClass.exists = {-&gt;
    return delegate.size() &gt; 0
}
groovy.util.slurpersupport.GPathResult.metaClass.notExists = {-&gt;
    return delegate.size() &lt;= 0
}

assert iiop.'non-existing-element'.notExists()
assert iiop.initializers.exists()</code></pre>
</div>
</div>
<div class="paragraph">
<p>On checking and appending nodes there is a one trap. At least in my eyes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">if(iiop.'as-context'.isEmpty()) iiop.appendNode {
  'as-context' ('caller-propagation': 'supported')
}
assert iiop.'as-context'.isEmpty() // true</code></pre>
</div>
</div>
<div class="paragraph">
<p>I haven&#8217;t found any good solution yet outside to count with this and not trying to write a code which do so.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_creaper_offline_command_for_datasource_manipulation">Creaper offline command for datasource manipulation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>And this is (<a href="https://github.com/wildfly-extras/creaper/blob/master/commands/src/main/resources/org/wildfly/extras/creaper/commands/datasources/AddDataSource.groovy" class="bare">https://github.com/wildfly-extras/creaper/blob/master/commands/src/main/resources/org/wildfly/extras/creaper/commands/datasources/AddDataSource.groovy</a>) this is a result of my effort to change WildFly datasource subsystem with <a href="https://github.com/wildfly-extras/creaper#offline">Creaper offline command</a>.</p>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/10/02/Groovy-and-XML.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/10/02/Groovy-and-XML.html</guid><category><![CDATA[groovy]]></category><category><![CDATA[wildfly]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Mon, 02 Oct 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Listing WFLY domain with Groovy]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/wildfly_groovy.png" alt="wildfly groovy.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_groovy_connects_with_wfly_cli">Groovy connects with WFLY cli</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Starting <code>groovysh</code> with <code>jboss cli jar</code> on classpath could be done in the following way</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">export JBOSS_HOME=$PWD
groovysh -cp $JBOSS_HOME/bin/client/jboss-cli-client.jar</code></pre>
</div>
</div>
<div class="paragraph">
<p>To connect with CLI you need</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>import <code>scriptsupport</code> package</p>
</li>
<li>
<p>disable security manager as there is some flaw in handling security policy through client jar up to WildFly. You can define a security manager policy file where permission for everythin is set.
Anoth option is to use call <code>System.setSecurityManager(null)</code> which seems to me being easier.</p>
</li>
<li>
<p>instantiate cli and connect to a running WildFly instance</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">import org.jboss.as.cli.scriptsupport.*
System.setSecurityManager(null)
cli = CLI.newInstance()
cli.connect("remote", "localhost", 9999, null, null)</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_links">Links</h3>
<div class="paragraph">
<p>For more extensive information about WildFly groovy scripting see</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://developer.jboss.org/wiki/AdvancedCLIScriptingWithGroovyRhinoJythonEtc" class="bare">https://developer.jboss.org/wiki/AdvancedCLIScriptingWithGroovyRhinoJythonEtc</a></p>
</li>
<li>
<p><a href="http://www.mastertheboss.com/jboss-server/jboss-script/managing-wildfly-with-groovy-shell" class="bare">http://www.mastertheboss.com/jboss-server/jboss-script/managing-wildfly-with-groovy-shell</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utility_methods">Utility methods</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">def getResponseAsStringList(def result) {
  list = []
  result.getResponse().get("result").asList().each {list &lt;&lt; it.asString()}
  return list
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_script">The script</h2>
<div class="sectionbody">
<div class="paragraph">
<p>And here is a script which loads data about servers in domain. If you print the content of the variables <code>hostServer</code>, <code>profileServer</code> or <code>groupProfile</code> you will get listing you could be interested in.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">groupProfile = [:]
groups = getResponseAsStringList(cli.cmd(':read-children-names(child-type=server-group)'))
profiles = getResponseAsStringList(cli.cmd(':read-children-names(child-type=profile)'))

groups.each { group -&gt;
  profile = cli.cmd("/server-group=$group:read-attribute(name=profile, include-defaults=true)")
    .getResponse().get("result").asString()
  groupProfile[group] = profile
}

hostServer = [:]
profileServer = [:]
profiles.each {profile -&gt; profileServer[profile] = []}
hosts = getResponseAsStringList(cli.cmd(':read-children-names(child-type=host)'))

hosts.each { host -&gt;
 resultServers = cli.cmd("/host=$host:read-children-names(child-type=server)")
 servers = getResponseAsStringList(resultServers)
 serverProfile = [:]
 servers.each { server -&gt;
   status = cli.cmd("/host=$host/server-config=$server:read-attribute(name=status, include-defaults=true)")
     .getResponse().get("result").asString()
   group = cli.cmd("/host=$host/server-config=$server:read-attribute(name=group, include-defaults=true)")
     .getResponse().get("result").asString()
   // when disabled profile is not filled
   // profile = cli.cmd("/host=$host/server=$server:read-attribute(name=profile-name, include-defaults=true)")
     .getResponse().get("result").asString()
   profile = groupProfile[group]
   serverProfile[server] = [status, group, profile]
   // if (profileServer[profile] == null)  profileServer[profile] = []
   profileServer[profile] &lt;&lt; "${host}:${server}"
 }
 hostServer[host] = serverProfile
}</code></pre>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/09/30/Listing-WFLY-domain-with-Groovy.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/09/30/Listing-WFLY-domain-with-Groovy.html</guid><category><![CDATA[groovy]]></category><category><![CDATA[wildfly]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 30 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Augeas and XML]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/twelve_labours.jpg" alt="twelve labours.jpg">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_what">Augeas&#8230;&#8203; what?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The name Augeas is based on greek legend about Herakles who has to clean stables
of the king Augeas from dung as one of his twelve laubours that he has to fulfill as a punishment
for killing his wife and children (for a justification he was driven mad by Hera).</p>
</div>
<div class="paragraph">
<p><a href="http://augeas.net">Augueas referenced here is a tool</a> for doing changes in textual configuration files.
It&#8217;s purpose came from fact that whole Linux configuration is based on text files.
If you want to do some changes automatically by a script you are usually doomed
to use <code>sed</code> or <code>awk</code>. Augeas is expected to do the task easier.
I was looking for a tool for doing changes of WildFly <code>standalone.xml</code> and I don&#8217;t like
XSLT thus I was searching for some alternatives.
This idea to use Augeas came to my mind from nice video presentation of usage JBoss with Docker.
It was one part from series of Virtual JBoss User Group
presentations (<a href="https://www.youtube.com/watch?v=4uQ6gR_xZhE">Docker and JBoss - the perfect combination</a>).
The presentation was lead by <a href="https://goldmann.pl/blog">Marek Goldmann</a> who does have really nice post
about topic of automatic changes of JBoss configuration file at his blog
- <a href="https://goldmann.pl/blog/2014/07/23/customizing-the-configuration-of-the-wildfly-docker-image" class="bare">https://goldmann.pl/blog/2014/07/23/customizing-the-configuration-of-the-wildfly-docker-image</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_the_augeas_works">How the Augeas works</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Augeas provides machinery but there has to be a 'recipy' which defines semantics of particular
configuration files. This recipy is called <code>lens</code> in terms of Augeas tooling.
<code>Lens</code> describes format of your configuration. By default Augeas provides <code>lenses</code> for standard files
residing under <code>/etc</code> directory. If you want to work with some other file you need to find a lens for your one
(see <a href="http://augeas.net/stock_lenses.html">Augeas built-in lenses</a>) or, when not provided,
you have two options -use some generic <code>lens</code> and be more verbose when changing configuration,
or write your own <code>lens</code>.</p>
</div>
<div class="paragraph">
<p>As I want to change XML file I needed to use <code>xml lens</code> for Augeas to know how to parse the file.
This provided lens is a simple in way that it doesn&#8217;t take care about any schema or namespace.
It just take the XML file as a text and separates tag (elements) from text and attributes.
The data is structured in a tree consisting nodes. Each node contains two strings <code>label</code> (a node name) and <code>value</code>.
You can point to each node with path expression similar to <code>XPath</code>
(see <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions" class="bare">https://github.com/hercules-team/augeas/wiki/Path-expressions</a> [Path Expressions in Augeas]).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_usage">Augeas usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For the work you will use command <strong>augtool</strong>.</p>
</div>
<div class="paragraph">
<p>Augeas is part of the most Linux distributions. If it&#8217;s not your case,
you can install it from the package - in Fedora it&#8217;s package named augeas (<code>dnf install augeas</code>) - or
you can simply <a href="http://augeas.net/download.html">download it</a> and put the <code>augtool</code> command on the <code>PATH</code>.</p>
</div>
<div class="paragraph">
<p>When you run <strong>augtool</strong> and you get an interactive shell where
you can start typing Augeas commands. When it&#8217;s run with some undefined parameter (e.g. <code>-h</code> is one of them <span class="icon"><i class="fa fa-smile-o"></i></span>)
then you will get list of possible options to use.</p>
</div>
<div class="paragraph">
<p>When I came to augeas tool first I was searching for a way to pass a set of rules (augeas commands)
and define a file that the rules will be applied to. But Augeas does not work in this way. You need to understand
the structure of Augeas tree and how it works with its nodes.
The Augeas wiki page <a href="https://github.com/hercules-team/augeas/wiki#Using_Augeas" class="bare">https://github.com/hercules-team/augeas/wiki#Using_Augeas</a> is quite informative in this matter.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s examine a bit the <code>augtool</code> here</p>
</div>
<div class="paragraph">
<p>If you run the <code>augtool</code> there are tree base commands which are your friends <span class="icon"><i class="fa fa-smile-o"></i></span> - <strong>print</strong>, <strong>ls</strong> and <strong>match</strong>.
These commands are used to get information about the structure of the Augeas tree.
<strong>Print</strong> and <strong>match</strong> do mostly the same. The <strong>print</strong> scrawl, starting at the defined path,
down by the tree and print all nodes (labels and values). <strong>Match</strong> do similar but you influencing
what is printed by using subsitute characters as <code>*</code> <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions">similar to XPath queries</a>.
Command *ls* just shows node names (labels) residing under the defined path.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_augeas_commands">Augeas commands</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Good start is to run command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool
ls /</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can see that there are two base nodes - <strong>augeas</strong> and <strong>files</strong>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Node <strong>augeas</strong> is where configuration is saved.</p>
</li>
<li>
<p>Node <strong>files</strong> is where all parsed data is saved.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to make some change you use command <strong>set</strong>. For example you can try to list the <code>/etc/fstab</code>
file by</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool
match /files/etc/fstab/*[label() = '#comment']
set /files/etc/fstab/#comment[1] "my strange comment"
save</code></pre>
</div>
</div>
<div class="paragraph">
<p>On this example we can see that Augeas works with a copy of the content and changes
are write back to the filesystem when <code>save</code> command is called.</p>
</div>
<div class="paragraph">
<p>That was about config files and lenses loaded by Augeas automatically.
That is, there are defined lenses and files to be <code>autoloaded</code>.</p>
</div>
<div class="paragraph">
<p>You can can observe the structure of the Augeas tree - lenses and files by running</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">print /augeas
print /files</code></pre>
</div>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Files don&#8217;t poses the same placement in the Augeas tree as they have
int the file system.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>if you want to see all the autoloaded files try</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">match /augeas/load/*/incl</code></pre>
</div>
</div>
<div class="paragraph">
<p>if you want to see all the autoloaded lenses try</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">ls /augeas/load</code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Because of all the autoloading the start of augtool could be a bit slower and if we know that
we want to work just with one specific file we can use <strong>--noload</strong> and <strong>--noautoload</strong> parameters.
In short run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -LA</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Try to run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -LA
print /</code></pre>
</div>
</div>
<div class="paragraph">
<p>and you will see nothing.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Helpful parameters</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>-b</em>  (<em>--backup</em>) which says that original file will be backuped, before changes are saved,
this parameter creates file with the same name but suffixed with <code>.augsave</code></p>
</li>
<li>
<p><em>-e</em>  (<em>--echo</em>) which says that commands which are executed will be printed on stdout</p>
</li>
<li>
<p><em>-r</em>  (<em>--root</em>) definition of a specific directory as root of the Augeas file system,
for example <code>-r .</code> says that the root will not be <code>/</code> but the current directory (still referenced under <code>/files/</code>)</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>With usage of <code>-LA</code> nothing is preloaded and we have to define ourselves what to work with.
Let&#8217;s define a file to work with and lens for parsing it. When we change such <em>settings</em>
the <code>load</code> command has to be used to get activated (or reload the agutool iself).
We have to define type of file to work with by adding element under augeas load node. That could be arbitrary name but let&#8217;s say <em>xml</em> as we will work with xml.
As adding the xml node we define what is lens which defines rules for parsing.
This will be predefined name of the lens <strong>Xml.lns</strong> (see <a href="https://github.com/hercules-team/augeas/wiki/Loading-specific-files" class="bare">https://github.com/hercules-team/augeas/wiki/Loading-specific-files</a>)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/lens Xml.lns</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now for definition what file to work with use absolute path to a file and put it under <em>xml</em> element under node incl.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl /opt/jboss/standalone/configuration/standalone.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>If there should be more files to load you can use the path expression</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl /opt/jboss/standalone/configuration/*.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or if you want to specify more files by your hand, you will need to use some of the technics
mentioned under <a href="https://github.com/hercules-team/augeas/wiki/Adding-nodes-to-the-tree" class="bare">https://github.com/hercules-team/augeas/wiki/Adding-nodes-to-the-tree</a>. AS an example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/xml/incl[1] /opt/jboss/standalone/configuration/standalone.xml
set /augeas/load/xml/incl[2] /opt/jboss/standalone/configuration/standalone-full.xml</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally we need to load the data inside to augeas</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">load</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you don&#8217;t use option <code>-LA</code> then xml lens is loaded under /augeas/load/Xml. You can then add there some file as</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set /augeas/load/Xml/incl[1] /opt/jboss/standalone/configuration/standalone.xml
load</code></pre>
</div>
</div>
<div class="paragraph">
<p>This has an 'advantage' that you are free from specifying lens definition at the start.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Now came the work with Augeas tree itself. As it was said the loaded files are under root node /files.
Let&#8217;s define a variable to reuse it afterwards. We are going to work with the <code>standalone.xml</code> loaded here.
And the variable is <em>logging</em> and will contain the Augeas tree of the logging subsystem</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defvar logging /files/home/ochaloup/tmp/augeas/standalone.xml/server/profile/subsystem[#attribute/xmlns=~regexp('.*logging.*')]</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;redefining logging level</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">set $logging/console-handler/level/#attribute/name "DEBUG"
set $logging/root-logger/level/#attribute/name "DEBUG"</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;at the end save changes into the original file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">save</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;as final step it&#8217;s good to check whether we are error free</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">print /augeas//error</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you want to work with some specific node and you don&#8217;t know whether it&#8217;s already existing
use command <em>defnode</em>. I wanted to define trace logging level for jca subsystem so I did following.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defnode logger_jca $logging/logger[#attribute/category='org.jboss.jca']
set $logger_jca/#attribute/category "org.jboss.jca"
defnode logger_jca_level $logger_jca/level
set $logger_jca_level/#attribute/name "TRACE"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Few final notes on working with xml converted to Augeas tree</p>
</div>
<div class="ulist">
<ul>
<li>
<p>tags (xml elements) are converted to augeas nodes</p>
</li>
<li>
<p>the attributes and text could be found under <code>#attribute</code> and <code>#text</code> node under the particular tag name</p>
</li>
<li>
<p>when traversing the tree you can use <code>*</code> as a definition of any value or you can use <code>//</code>
to expect whatever number of nodes between current and the defined one.
Try <code>//*[#attribute/xmlns=~regexp('.<strong>logging.</strong>')]</code>.</p>
</li>
<li>
<p>check section <a href="https://github.com/hercules-team/augeas/wiki/Path-expressions#user-content-Tips_amp_Tricks">Tips and Trics in Augeas manual page</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running_augtool_non_interactive_way">Running augtool non-interactive way</h2>
<div class="sectionbody">
<div class="paragraph">
<p>How to use <code>augtool</code> to define lenses and work files in an one step?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augtool -r . --noautoload --transform 'Xml.lns incl /standalone.xml'</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command says that you define root of the augtool to current directory.
There is automatically loaded no default lenses.
There is no default rules for loading any file.
Then you are defining to load <code>standalone.xml</code> (expected from the current directory)
and this file will be transformed by lens <code>Xml.lns</code>.
Now you are ready to run any of the commands mentioned above.</p>
</div>
<div class="paragraph">
<p>If you have commands to be executed by the Augeas tooling you can let the Augeas
to read it from a file (<code>-f</code> parameter) or pass it on the standard input.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_my_augeas_script_to_change_wildfly_logging">My Augeas script to change WildFly logging</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#!/bin/bash

# ------------------------------------------------------
# This scripts aim to run Augeas tool (command augtool)
# to change content of specific xml file
# ------------------------------------------------------

# -------------------------------------------
# ---------------- FUNCTIONS ----------------
# -------------------------------------------
function usage() {
cat &lt;&lt; EOF
Usage:
`basename $0` path_to_augeas_rules path_to_xml [file_with_bash_variables] [OPTIONS]
  path_to_augeas_rules       path to files with augeas rules but without loading file and setting xml lenses
                             the loading and saving are done at the end of this script
                             please, be sure to escape Augeas variables otherwise it will be expanded as bash variables
  path_to_xml                file that will be changed by the augeas processing(rules)
  file_with_bash_variables   file with variables that will be expanded to path_to_augeas_rules
 Options:
  -h Show help options.
  -Dvariable_name=value  Define variable that is used for replacement of data in xml file.
                         This variable will override a value from bash variable file if defined.
 WARNING: if you run this script against some Augeas script then be sure to escape augeas variables (defvar) by backslash
          not slashed variables will be handled as bash variables and will be expanded
EOF
}

# Parsing variables defined as script options
function parseVariables() {
  PARSED_VARIABLES=0
  while [ $# -gt 0 ] &amp;&amp; [[ "$1" =~ ^-D([^=]+)=(.*) ]]; do
    [ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "parsing $1"
    VAR_NAME=`echo ${BASH_REMATCH[1]} | sed 's/\./_/g'`
    VAR_VALUE="${BASH_REMATCH[2]}"
    eval "${VAR_NAME}=${VAR_VALUE}"
    shift
    PARSED_VARIABLES=$(($PARSED_VARIABLES+1))
  done
}

# Loading file with augeas rules and running evaluation over the file
# to inject values of bash variables defined by script or script parameters
function evalAugeas() {
  [ "x$1" = "x" ] &amp;&amp; echo "No argument of filename specified" &amp;&amp; return
  local LINE
  # flag -r tells read not to treat backslashes as escape char
  while read -r LINE; do
    local EVALUATED_LINE=`eval "echo \"${LINE}\""`
    # comment line (btw. quoting regexp:  http://stackoverflow.com/questions/218156/bash-regex-with-quotes)
    [[ "$EVALUATED_LINE" =~ `echo "^[ ]*[#]"` ]] &amp;&amp; continue
    # including different file
    if [[ "$EVALUATED_LINE" =~ `echo "^[ ]*\binclude\b[ ]+(.*)"` ]]; then
      local MATCH="${BASH_REMATCH[1]}"
      # possibly looking relatively from directory where this script is placed in
      [ ! -f "$MATCH" ] &amp;&amp; MATCH="$(dirname $([ -L $0 ] &amp;&amp; readlink -f $0 || echo $0))/${MATCH}"
      [ -f "$MATCH" ] &amp;&amp; evalAugeas "$MATCH" || &gt;&amp;2 echo "Can't include '$MATCH' as not a file in ruleset '$1'"
      continue
    fi
    # printf is needed to get new lines added on \n
    printf -v TEMPLATE "${TEMPLATE}${EVALUATED_LINE}\n"
  done &lt; "$1"
}


# -----------------------------------------------
# ---------------- SCRIPT ITSELF ----------------
# -----------------------------------------------
[ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "Calling: $0 $@"
# Taking off variables defined right after the script name
# variable means '-Dname=value'
parseVariables "$@"
shift $PARSED_VARIABLES

# Printing help
[[ "$*" =~ -[-]{0,1}(h|help)( |$) ]] &amp;&amp; usage &amp;&amp; exit
[ $# -eq 0 ] &amp;&amp; usage &amp;&amp; echo " -&gt; No arguments defined" &amp;&amp; exit
[[ "$1" =~ ^- ]] || [ "$2" = "" ] || [[ "$2" =~ ^- ]] &amp;&amp; usage \
   &amp;&amp; echo " -&gt; First two arguments are obligatory to be paths to files" &amp;&amp; exit
! [ -f "$1" ] &amp;&amp; usage &amp;&amp; echo " -&gt; Can't find file '$1' that should contain augeas rules" &amp;&amp; exit


AUGEASFILE="$1"
shift
# If we are able to touch the file in second argumetn (which is xml to transform)
# changing it to an absolute path. If not leaving it as it is as. Asterisk notation
# could be used (e.g. /abs/path/configuration/standalone*.xml)
[ -f "$1" ] &amp;&amp; XMLFILE=`readlink -f "$1"` || XMLFILE="$1"
[[ ! "$XMLFILE" =~ ^/ ]] &amp;&amp; echo "Please define the XML file(s) descriptor '$1' as absolute path" &amp;&amp; exit
shift
VARIABLESFILE=
[ -f "$1" ] &amp;&amp; VARIABLESFILE="$1" &amp;&amp; shift

# Injecting the variables from file in the third argument
# If variables contains '.' then it's changed for underscore '_'
if [ -f "$VARIABLESFILE" ]; then
  VARS=`cat "$VARIABLESFILE" | sed 's/\./_/g'`
  eval "$VARS"
fi

# Parsing variables defined as script options
# variable means '-Dname=value'
parseVariables "$@"
shift $PARSED_VARIABLES

# Injecting data from augeas rule file to TEMPLATE var
# simple way: TEMPLATE=`eval "echo \"$(cat \"$AUGEASFILE\")\""`
TEMPLATE=
evalAugeas "$AUGEASFILE"
[ "$DEBUG" = true ] || [ "$debug" = true ] &amp;&amp; echo "$TEMPLATE"


# -- And now let's rock'n'roll with Augeas itself --
augtool -Aeb -t "Xml.lns incl $XMLFILE" &lt;&lt;EOF
defvar file "/files${XMLFILE}"
$TEMPLATE
save
print /augeas//error
EOF


# Cleaning the output XML file by tidyp if available
tidyp -v &gt; /dev/null 2&gt;&amp;1
if [ $? -eq 0 ]; then
  for I in $XMLFILE; do
    tidyp -xml -i -q &lt; "$I" &gt; "$I".tmp
    mv "$I".tmp "$I"
  done
fi</code></pre>
</div>
</div>
<div class="paragraph">
<p>I name the script as <code>augeas</code> and run it with parameter of what is the logging category to change
and adding the Augeas commands to be executed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">augeas -Dcategory=com.arjuna ~/scripts/augeasconf/logging.aug</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>logging.aug</code> looks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">defvar logging \$file/server/profile/subsystem[#attribute/xmlns=~regexp('.*logging.*')]
defnode logger \$logging/logger[#attribute/category='${category:-com.arjuna}']
set \$logger/#attribute/category "$category"
defnode logger_level \$logger/level
set \$logger_level/#attribute/name "${level:-TRACE}"</code></pre>
</div>
</div>
<div class="paragraph">
<p>There is a little bit magic of escaping with <code>\</code> as bash and <code>augtool</code> uses character <code>$</code> for similar
approach (variable definition) and I need to replace some of the values by bash variables and some
of the variables to be processed by Augeas itself.</p>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</guid><category><![CDATA[augeas]]></category><category><![CDATA[xml]]></category><category><![CDATA[configuration]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 30 Sep 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Asciidoctor]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/articles/asciidoctor.png" alt="asciidoctor.png">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_asciidoctor_and_asciidoc_and_the_others">Asciidoctor and AsciiDoc and the others</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>Asciidoctor</code> is a text processor and toolchain as stated <a href="https://github.com/asciidoctor/asciidoctor">in their github pages</a>.
Under the term of text processor we can imagine a processor which gets on input a text <em>annotated</em> by in
syntax and on output you get some <em>readable</em> format like pdf. The <code>Asciidoctor</code> works with
<a href="http://www.methods.co.nz/asciidoc">AsciiDoc</a> markup language.</p>
</div>
<div class="paragraph">
<p>There are multiple other markup languages which serves for writing text and providing their toolchain
to provide text in well consumable/readable form.
The text processor based on XML is <a href="http://docbook.org">DocBook</a>,
the well known for type setting is [<a href="http://www.latex-project.org">LaTeX</a>.
The html itself is a markup language where you put tags around your text and browser works
as the processor to show the text formatted.</p>
</div>
<div class="paragraph">
<p>The advantage is that you can write the text annotate it with a formatting syntax
and then with usage of the tools gets various output format - kind of html, pdf etc.</p>
</div>
<div class="paragraph">
<p>All the named markup languages have trouble that&#8217;s the syntax delay you when you&#8217;re writing
and is harder to read the raw text with formatting markup.</p>
</div>
<div class="paragraph">
<p>That&#8217;s where <a href="http://www.methods.co.nz/asciidoc">AsciiDoc</a> or maybe better known
<a href="http://daringfireball.net/projects/markdown">MarkDown</a> languages
and the <a href="https://en.wikipedia.org/wiki/Wiki_markup">Wiki Markup</a> could be counted too.
They are markup languages which aims to be easy to read and easy to write when
working with raw text and still easily covertable to formats like html or pdf.</p>
</div>
<div class="paragraph">
<p>I fell in low with <code>AsciiDoctor</code>. I&#8217;m not sure why exactly in this one but
but it seemed to me being a little more intuitive than <code>MarkDown</code>.
I use on day to day basis, whenever I need to write some notes (especially more structured)
or any kind of longer text.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_asciidoctor_in_more_details">AsciiDoctor in more details</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I know that the first idea to look at it came from JBoss Community podcast
<a href="http://jbosscommunityasylum.libsyn.com/podcast-32-is-there-an-asciidoctor-on-board">JBoss Community Aylum on Asciidoctor</a>
which provides quite a good portion information what is it about and what is it good for.</p>
</div>
<div class="paragraph">
<p><code>Asciidoctor</code> is based on syntax of old Python <code>AsciDoc</code> markup language but it rewrites the processor to Ruby
and adds a many enhancements on top of it.
It&#8217;s focused on writing documentation or technical type of text.</p>
</div>
<div class="paragraph">
<p>I learn to use <a href="https://atom.io">Atom</a> editor to write the text. There I use <a href="https://atom.io/packages/language-asciidoc">plugin to for syntax highligting</a>
(probably installed by default) and then <a href="https://atom.io/packages/asciidoc-preview">plugin to preview the text written in AsciiDoctor markup</a>.
The shortcut <code>CTRL+SHIFT+A</code> started to be my beloved friend.</p>
</div>
<div class="paragraph">
<p>From writing text it was short way to use it for writing blog posts (see this blog and <a href="http://hubpress.io">Hubpress.io platform</a>)
and using it for <a href="http://asciidoctor.org/docs/install-and-use-revealjs-backend">preparing presentation</a>. It&#8217;s really my favorite
way as I can restructuralize the text with ease that is not possible in GUI editors.
I could use the pure Reveal.js[<a href="http://lab.hakim.se/reveal-js" class="bare">http://lab.hakim.se/reveal-js</a>] but usage of <code>AsciiDoc</code> makes writing
even easier.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_syntax_reference">Syntax reference</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>For getting known to its syntax look at <a href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference">Asciidoc Quick Referece</a>.</p>
</li>
<li>
<p>The cheatsheet I use is <a href="https://powerman.name/doc/asciidoc">AsciiDoc cheatsheet at PowerMan</a></p>
</li>
<li>
<p>The perfect guide to <code>AsciiDoctor</code> hacks is <a href="https://leanpub.com/awesomeasciidoctornotebook">Awesome Asciidoctor Notebook</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_some_howtos">Some HOWTOs</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nevertheless all the time when I start to learn something I normally don&#8217;t like some small part of default behavior.
Here it was the fact that first paragraph after the title is presented as lead paragraph and it&#8217;s highlighted.
I started to search and I get to understanding that each paragraph (block as formatable building block) gets <code>a role</code> by default.
In this case it should be role <code>lead</code> which could be defined by hand in text by putting the role name into square brackets preceded by dot - like <code>[.lead]</code>.</p>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/17/Asciidoctor.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/17/Asciidoctor.html</guid><category><![CDATA[asciidoctor]]></category><category><![CDATA[writing]]></category><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Wed, 17 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[HubPress.io - how to installl]]></title><description><![CDATA[<h1 id="_installation_of_hubpress_io" class="sect0">Installation of HubPress.io</h1>
<div class="paragraph">
<p>Writing blogposts is a proof-of-concept for me having them as a knowledgebase.
For a some time when writing any note I use <a href="http://asciidoctor.org">AsciiDoc(tor)</a> format.
Thus I started to search for option that allows me to write blog-notes that way too.</p>
</div>
<div class="paragraph">
<p>I could see that many people host blogs at <a href="http://github.io" class="bare">http://github.io</a> I decided to try that way too.
I started by looking for a tool to generate static webpages with <a href="http://asciidoctor.org/docs/asciidoc-asciidoctor-diffs">AsciiDoc</a> support.
There is the mostly used <code>Jekyll</code> - written in ruby, generating a webpage from template
on your local machine. There is <a href="https://github.com/asciidoctor/jekyll-asciidoc">plugin for AsciiDoc</a>.
Other tool that I was evaluating was <a href="http://awestruct.org">:awestruct</a>.</p>
</div>
<div class="paragraph">
<p>Then I found <a href="http://hubpress.io">HubPress.io</a> that has a concept of a webapp whole written in javascript
which generates static website directly in your browser sending it then to GitHub repo. Merit of this approach
is a nice admin console in your browser. Flaw is a little bit longer waiting time to get post being published.
The other could be current
<a href="http://blog.hubpress.io/2016/10/11/We-Arent-Dead-Yet-Hub-Press-Roadmap.html">stall in the development process</a>. But it seems not be fully true as there is new versions coming (see
<a href="https://github.com/HubPress/hubpress.io/commit/ceaca97655fd3a49e4bc057201f0eb7109ad2d4a">0.8.0</a>).</p>
</div>
<div class="paragraph">
<p>So far so good. I decided to give it a try.</p>
</div>
<div class="paragraph">
<p>Process of installation is quite simple - you <a href="https://github.com/HubPress/hubpress.io">fork repo</a>,
<a href="https://github.com/HubPress/hubpress.io/blob/master/hubpress/config.json">change config file</a>
and you can start to write a blog posts inside of the administration console.</p>
</div>
<div class="paragraph">
<p>Nevertheless check <a href="https://hubpress.gitbooks.io/hubpress-knowledgebase">knowledgebase to HubPress</a>
and <a href="https://github.com/HubPress/dev.hubpress.io/blob/gh-pages/README.adoc">documentation on GitHub</a>.</p>
</div>
<div class="paragraph">
<p>&#8230;&#8203;or if you plan to run <code>HubPress.io</code> blog against your custom domain these steps could be helpful for you</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fork repo</p>
<div class="ulist">
<ul>
<li>
<p>Fork <a href="https://github.com/HubPress/hubpress.io">github repository</a> and set <code>gh-pages</code>
<a href="https://github.com/HubPress/dev.hubpress.io/blob/gh-pages/README.adoc#use-a-custom-domain-or-github-page-domain-already-in-use">as default one</a>.</p>
</li>
<li>
<p>set the <code>custom domain</code> field to name of your domain</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Having set the <code>custom domain</code> will cause creation of <code>CNAME</code> file under root
of your github repository.</p>
</div>
<div class="paragraph">
<p>The content of the file is just the name of your custom domain - thus what you
put to the field.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="http://blog.chalda.cz/images/hubpressio/githubpages.jpg" alt="githubpages.jpg">
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>change <code>hubpress/config.json</code> file to contain (meta)data</p>
<div class="ulist">
<ul>
<li>
<p>username</p>
</li>
<li>
<p>repositoryName</p>
</li>
<li>
<p>branch</p>
</li>
<li>
<p>cname
in my case it was like this</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "meta": {
    "username": "ochaloup",
    "repositoryName": "blog.chalda.cz",
    "branch": "gh-pages",
    "cname": "blog.chalda.cz",
}, ...</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>config.json</code> file serves to HubPress.io as a configuration file so all settings
that you will set in administration interface will be saved here</p>
</div>
</td>
</tr>
</table>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>When all is set fine you can now go to <code>HubPress.io</code> admin page which is
hidden under subaddress <code>hubpress</code>. In my case it&#8217;s at path <a href="http://blog.chalda.cz/hubpress" class="bare">http://blog.chalda.cz/hubpress</a>.
You need to log in with credentials which you use to login to GitHub. HubPress.io calls
directly the GitHub identification service to confirm that you are the owner of the repo.</p>
</li>
<li>
<p>Afte the first login you can see empty screen. That&#8217;s ok and just create a new article.<br>
[Updated] for version <code>0.8.0</code> it seems that there is already shown information that you have 0 posts so it&#8217;s not misleading already.</p>
</li>
<li>
<p>For <a href="https://disqus.com">Disqus</a> you need short name for your site to be set in HubPress.io.
You will find it when already having page under Discusq when you go <code>Admin</code> &#8594; <code>Settings</code>
&#8594; choose page &#8594; <code>General</code> &#8594; <code>Shortname</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>That&#8217;s more or less it. Now it&#8217;s time to write and experiment.</p>
</div>]]></description><link>http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</guid><category><![CDATA[hubpress.io]]></category><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 06 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[DNS setting for GitHub pages]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_github_pages">Github pages</a>
<ul class="sectlevel2">
<li><a href="#_war_of_terminology">War of terminology</a></li>
<li><a href="#_repository_settings">Repository settings</a></li>
</ul>
</li>
<li><a href="#_dns_settings">DNS settings</a>
<ul class="sectlevel2">
<li><a href="#_tools_to_help">Tools to help</a></li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_github_pages">Github pages</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When setting a blog on GitHub pages I found a bit hard for me to understand
what should be set for DNS to run it on my custom domain.</p>
</div>
<div class="paragraph">
<p>There is quite good introductory for the process in
<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/">documentation</a>
but still I was quite confused at the start. Unknown terms and fact that
I&#8217;m not familiar with DNS. I mean I haven&#8217;t seen it from my college times.</p>
</div>
<div class="paragraph">
<p>I wanted the following setup</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a> being pointed from domain <a href="http://chalda.cz" class="bare">http://chalda.cz</a></p>
</li>
<li>
<p><a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a> being pointed from doman <a href="http://blog.chalda.cz" class="bare">http://blog.chalda.cz</a></p>
</li>
<li>
<p><code>www</code> variants points to variant without www (<a href="http://www.chalda.cz" class="bare">http://www.chalda.cz</a> to <a href="http://chalda.cz" class="bare">http://chalda.cz</a>)</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_war_of_terminology">War of terminology</h3>
<div class="ulist">
<ul>
<li>
<p><strong>user pages</strong>  - regards of <a href="https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/">DNS settings</a>
it&#8217;s the same thing as organization pages just for a user. A user (me) have only one user
personal pages. You can create one when creating GitHub repository <code>&lt;username&gt;.github.io</code>.
In my case it&#8217;s <a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a>. Then any static web page content
is available at <code><a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a></code>.</p>
</li>
<li>
<p><strong>project pages</strong> - <em>project</em> is my blog at <a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a>.
By default is available at <code><a href="http://ochaloup.github.io/blog.chalda.cz" class="bare">http://ochaloup.github.io/blog.chalda.cz</a></code>.</p>
</li>
<li>
<p><strong>apex domain</strong> - is equal to a term <code>root domain</code> - meaning domain without <code>www</code> or <code>blog</code>.
In my case the wording <code>apex domain</code> means <code>chalda.cz</code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_repository_settings">Repository settings</h3>
<div class="paragraph">
<p>For a GitHub repository being availble on GitHub Pages (meaning under <code>.github.io</code>)
you need to set it up. Go by tab <code>Settings</code> at your repository and scroll down to section <em>GitHub Pages</em>.
There you change <em>None</em> to a branch that should represent the content of the <em>GitHub Pages</em>.</p>
</div>
<div class="paragraph">
<p>When you want to use custom domain you need to define what will be at box <em>Custom domain</em>.
In my case I want to have the blog available under <a href="http://blog.chalda.cz" class="bare">http://blog.chalda.cz</a> then I set there <code>blog.chalda.cz</code>.
My user page should be available under <a href="http://chalda.cz" class="bare">http://chalda.cz</a> then I set there <code>chalda.cz</code>.
Now when you do so GitHub starts with automatic recirection to the custom domain.
In my case it means that going to <a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a> will
automatically redirect to <a href="https://chalda.cz" class="bare">https://chalda.cz</a>.</p>
</div>
<div class="paragraph">
<p>When you define something into <em>Custom domain</em> box then GitHub automatically creates
a file named <code>CNAME</code> with only one line consisting the specified Custom domain. Changing
or creating content of the <code>CNAME</code> file has the same result as setting that in the box
under <code>Settings</code> tab.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dns_settings">DNS settings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>First (probably obvious but&#8230;&#8203;) observation was that changes in settings are propagated
really in terms of hours, not sooner <span class="icon"><i class="fa fa-smile-o"></i></span></p>
</div>
<div class="paragraph">
<p>After spending some time with help of <a href="https://help.github.com/articles/troubleshooting-custom-domains/">GitHub documentation</a>
and some blog posts similar to this one I got the following settings started to work.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Documentation recommends using <code>ALIAS</code> DNS record for apex domain settings than
<code>A</code> record but <code>ALIAS</code> is not available in DNS settings of my provider.</p>
</div>
<div class="paragraph">
<p>I just took a <code>cz</code> domain from first offer came from Google search at <a href="http://domena.cz" class="bare">http://domena.cz</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/ochaloup/ochaloup.github.io" class="bare">https://github.com/ochaloup/ochaloup.github.io</a> has custom domain set as <code>chalda.cz</code></p>
</li>
<li>
<p><a href="https://github.com/ochaloup/blog.chalda.cz" class="bare">https://github.com/ochaloup/blog.chalda.cz</a> has custom domain set as <code>blog.chalda.cz</code></p>
</li>
<li>
<p>DNS settings</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>@ IN SOA ns1.ignum.com. hostmaster.ignum.cz. 2017020502 10800 3600 604800 3600
@ IN A 192.30.252.153
@ IN A 192.30.252.154
blog IN CNAME ochaloup.github.io.
www IN CNAME ochaloup.github.io.
@ IN NS ns1.ignum.com.
@ IN NS ns2.ignum.com.
@ IN TXT "v=spf1 include:_spf.ignum.cz ~all"
_autodiscover._tcp IN SRV 0 0 443 nmrdiscover.ignum.cz.</code></pre>
</div>
</div>
<div class="paragraph">
<p>For more information on <code>SOA</code>, <code>NS</code> and <code>TXT</code> record check some DNS documentation.
Here briefly what I understood - <code>SOA</code> is compulsory, defines who is responsible
for domain, <code>NS</code> is required by my provider here and defines where name servers
for this domains are, <code>TXT</code> serves information about the server (e.g. dns account info).</p>
</div>
<div class="paragraph">
<p>Now the <code>A</code> records are needed for apex domain <code>chalda.cz</code> redirection works.
It points to  GitHub DNS servers diretly.
The <code>blog</code> (for redirect to <em>project page</em>) uses <code>CNAME</code> record
and points to my <code>github.io</code>.
Finally <code>www</code> <code>CNAME</code> record serves to get available my <em>user page</em> at domain
<a href="http://chalda.cz" class="bare">http://chalda.cz</a> and <a href="http://www.chalda.cz" class="bare">http://www.chalda.cz</a>. (TODO: here does not work or what?)</p>
</div>
<div class="sect2">
<h3 id="_tools_to_help">Tools to help</h3>
<div class="paragraph">
<p>When I start to play with setup I found out two tools helpful.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>command <code>dig</code> - <code>dig chalda.cz</code>. With a more consense output
<code>dig chalda.cz +nostats +nocomments +nocmd</code></p>
</li>
<li>
<p>Chrome developer tools (Ctrl+Shift+I) - got to tab <em>Network</em>, enable checkbox <em>Preserve log</em>
and go to e.g. <a href="http://ochaloup.github.io" class="bare">http://ochaloup.github.io</a>. You can see in headers that you were redirected
to <a href="http://chalda.cz" class="bare">http://chalda.cz</a> by <code>301 Moved Permanently</code>. If you do some changes then info that the page
was moved permanently is remembered in browser cache and browser then directly shows you the <a href="http://chalda.cz" class="bare">http://chalda.cz</a>
without consultation with DNS server (<code>301 Moved Permanently (from disk cache)</code>). To workaround that clear
the Chrome&#8217;s cache - go to <code>chrome://net-internals</code>, click a <em>small down pointing arrow in right corner</em>
and choose <em>Tools &#8594; Clear cache</em> from drop down menu.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</guid><category><![CDATA[github]]></category><category><![CDATA[dns]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sat, 06 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Links]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>List of links I found interesting</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_transactions">Transactions</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.youtube.com/watch?v=5ZjhNTM8XU8">Transactions: myths, surprises and opportunities</a></dt>
<dd>
<p>presentation by Martin Kleppmann for Strange Loop 2015. He summarizes what is transaction, what ACID means, how disstributed world changed the perception.</p>
</dd>
<dt class="hdlist1"><a href="https://www.infoq.com/minibooks/JTDS">Java Transaction Design Strategies, ebook</a></dt>
<dd>
<p>perfect introduction to transaction in Java. You will learn what is local
transaction, global transaction, two-phase commit, what you can expect from JTA and most of the examples are for Java EE and Spring too.</p>
</dd>
<dt class="hdlist1"><a href="https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/">Replicated Data Consistency Explained Through Baseball</a></dt>
<dd>
<p>eventual consistency explained on the example of the baseball game. I find it really comprehensible and nicely written.</p>
</dd>
<dt class="hdlist1"><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">The Log: What every software engineer should know about real-time data&#8217;s unifying abstraction</a></dt>
<dd>
<p>I find this (quite long) article perfect summary of what the event sourcing is about. This is look from stream processing side "point of view" but all that gives much sense. How the stream processing and event source differs or what they are in common is nicely taken by presentation by Martin Klepmann at <a href="https://www.youtube.com/watch?v=avi-TZI9t2I">Event Sourcing and Stream Processing at Scale,
Domain-Driven Design Europe 2016</a></p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_design">Design</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.youtube.com/watch?v=STKCRSUsyP0">The Many Meanings of Event-Driven Architecture</a></dt>
<dd>
<p>nice summary of meening of terms that you hit when reading about event-driven design. I like how the presentation was informative but comperehensible.</p>
</dd>
</dl>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java">Java</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.ibm.com/developerworks/library/j-nativememory-linux">Thanks for the memory, Linux</a></dt>
<dd>
<p>awsome article about Java memory management in Linux and mainly on topic of native memory issues.
There is another article talking about this topic
<a href="https://www.ibm.com/developerworks/java/library/j-nativememory-aix/">on AIX too</a>.</p>
</dd>
</dl>
</div>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/05/Links.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/05/Links.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Fri, 05 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Blog posts history]]></title><description><![CDATA[<div class="sect2">
<h3 id="_2017">2017</h3>
<div class="ulist">
<ul>
<li>
<p>[2017-12-18] <a href="http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html" class="bare">http://blog.chalda.cz/2017/12/18/How-to-work-with-a-docker-image-to-Minishift-repository.html</a></p>
</li>
<li>
<p>[2017-12-16] <a href="http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html" class="bare">http://blog.chalda.cz/2017/12/15/Docker-tags-and-registries.html</a></p>
</li>
<li>
<p>[2017-12-05] <a href="https://www.youtube.com/watch?v=URgDZ6NCEtY">JOpen Space: Saga transactions a přístup, který volí transakční manager Narayana</a></p>
</li>
<li>
<p>[2017-11-23] <a href="http://blog.chalda.cz/2017/11/23/Starting-Minishift-without-internet-connection.html" class="bare">http://blog.chalda.cz/2017/11/23/Starting-Minishift-without-internet-connection.html</a></p>
</li>
<li>
<p>[2017-11-16] <a href="http://blog.chalda.cz/2017/11/16/Set-up-HA-Poxy-for-HTTP-header-balancing.html" class="bare">http://blog.chalda.cz/2017/11/16/Set-up-HA-Poxy-for-HTTP-header-balancing.html</a></p>
</li>
<li>
<p>[2017-10-01] <a href="https://developer.jboss.org/wiki/MSAQuickstartsWithLRAREST-ATOnMinishift" class="bare">https://developer.jboss.org/wiki/MSAQuickstartsWithLRAREST-ATOnMinishift</a></p>
</li>
<li>
<p>[2017-09-30] <a href="http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html" class="bare">http://blog.chalda.cz/2017/09/30/Augeas-and-XML.html</a></p>
</li>
<li>
<p>[2017-08-25] <a href="https://developer.jboss.org/wiki/Three-phaseCommitProtocol" class="bare">https://developer.jboss.org/wiki/Three-phaseCommitProtocol</a></p>
</li>
<li>
<p>[2017-06-14] <a href="http://jbossts.blogspot.cz/2017/06/sagas-and-how-they-differ-from-two.html" class="bare">http://jbossts.blogspot.cz/2017/06/sagas-and-how-they-differ-from-two.html</a></p>
</li>
<li>
<p>[2017-05-25] <a href="https://developer.jboss.org/wiki/TwoPhaseCommit2PC" class="bare">https://developer.jboss.org/wiki/TwoPhaseCommit2PC</a></p>
</li>
<li>
<p>[2017-05-06] <a href="http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html" class="bare">http://blog.chalda.cz/2017/05/06/Hub-Pressio-how-to-installl.html</a></p>
</li>
<li>
<p>[2017-05-06] <a href="http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html" class="bare">http://blog.chalda.cz/2017/05/06/DNS-setting-for-Git-Hub-pages.html</a></p>
</li>
<li>
<p>[2017-05-05] <a href="http://blog.chalda.cz/2017/05/05/Links.html" class="bare">http://blog.chalda.cz/2017/05/05/Links.html</a></p>
</li>
<li>
<p>[2017-05-05] <a href="http://blog.chalda.cz/2017/01/01/About-the-blog.html" class="bare">http://blog.chalda.cz/2017/01/01/About-the-blog.html</a></p>
</li>
</ul>
</div>
</div>]]></description><link>http://blog.chalda.cz/2017/05/05/Blog-posts-history.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/05/05/Blog-posts-history.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Fri, 05 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[About the blog]]></title><description><![CDATA[<div class="paragraph">
<p>What is this about?</p>
</div>
<div class="paragraph">
<p>&#8230;&#8203;just another blog where you can find notes from somebody&#8217;s work programming life.</p>
</div>
<div class="paragraph">
<p>And that should be it.</p>
</div>
<div class="paragraph">
<p>There is still a motivation for doing that, sure. Few reasons said solely selfish.</p>
</div>
<div class="paragraph">
<p>First one is showing that I like what I&#8217;m doing and this passion could potentialy help somebody.
The kick of for me thinking about such thing was
<a href="https://vimeo.com/99516367">presentation Jurgen Appelo at GeeCon 2014</a>. I watched several
other presentations from Jurgen afterwards but this one somehow influenced thinking of me.</p>
</div>
<div class="paragraph">
<p>The second is my infinite fight with recording knowledge. I usualy read something and
I forget what that thing was about after few weeks. If not used in short period of time then
it goes to <code>/dev/null</code> black hole.
I found out that putting down few notes summarized in my own words helps me
in this endeavour. Plus it works as kind of time machine to get back in time
to understand what I was thinking to understand <span class="icon"><i class="fa fa-smile-o"></i></span>.</p>
</div>
<div class="paragraph">
<p>Yeap, the only trouble is that writing such notes take a good amount of time.
But most probably it&#8217;s worthy.</p>
</div>]]></description><link>http://blog.chalda.cz/2017/01/01/About-the-blog.html</link><guid isPermaLink="true">http://blog.chalda.cz/2017/01/01/About-the-blog.html</guid><category><![CDATA[blog]]></category><dc:creator><![CDATA[chalda]]></dc:creator><pubDate>Sun, 01 Jan 2017 00:00:00 GMT</pubDate></item></channel></rss>